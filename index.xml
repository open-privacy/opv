<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Open Privacy Vault on</title><link>/</link><description>Recent content in Open Privacy Vault on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:47:36 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Introduction</title><link>/docs/overview/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/introduction/</guid><description>Open Privacy Vault - Secure, Performant, Open Source PII as a Service.
Quick Start Running OPV locally Start from source code:
git clone https://github.com/open-privacy/opv cd opv make deps make vendor make run Start from docker image (TODO):
docker run -it -p 27999-28001:27999-28001 open-privacy/opv Test Local APIs Now you can test the APIs with curl.
# Create a new grant token from the control plane http://localhost:27999 curl -X POST &amp;#39;http://localhost:27999/api/v1/grants&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ --data-raw &amp;#39;{ &amp;#34;allowed_http_methods&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;domain&amp;#34;: &amp;#34;test.</description></item><item><title>API</title><link>/docs/development/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/api/</guid><description>TODO</description></item><item><title>2. Architecture</title><link>/docs/overview/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/architecture/</guid><description>Network Components Data Models</description></item><item><title>Playground</title><link>/docs/development/playground/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/playground/</guid><description>TODO</description></item><item><title>3. Planes</title><link>/docs/overview/planes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/planes/</guid><description>Planes are separated entrypoints and ports to access different segments of OPV. Currently OPV is planning to support the following planes:
Control Plane Data Plane Proxy Plane (TODO) Control Plane Control plane (default port: 27999) is a group of controllers that handle the admin related logic. In your network, you should do your best to isolate the access to the control plane.
ðŸ‘‰ Please don't expose control plane to the public network.</description></item><item><title>Source Code</title><link>/docs/development/source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/source/</guid><description>Development related commands can be found in the Makefile file.
Compile from the source Make sure you have go and make installed.
# Prepare dependencies and compile opv make deps make vendor make run One can open the local swagger UI to test the APIs:
Default DataPlane Swagger URL: http://127.0.0.1:28000/swagger/index.html Default ControlPlane Swagger URL: http://127.0.0.1:27999/swagger/index.html Generate swagger 2.0 When you make any change to APIs (e.g. pkg/dataplane, pkg/controlplane, pkg/apimodel), you may want to regenerate the swagger 2.</description></item><item><title>4. Env Configuration</title><link>/docs/overview/env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/env/</guid><description>OPV&amp;rsquo;s configuration is currently done via environment variables. Please follow the source code and comments.
env.go</description></item><item><title>FAQ</title><link>/docs/development/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/faq/</guid><description>How to migrate database? By default, OPV uses ent for auto migration. If the OPV_DB_DRIVER and OPV_DB_CONNECTION_STR is set corrently with the right database permission, OPV will run the database migration on startup (including both dataplane and controlplane).</description></item><item><title>5. Encryption</title><link>/docs/overview/encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/encryption/</guid><description>Supported Encryption Engine OPV&amp;rsquo;s encryption is designed to work with multiple encryption engines. Currently supported encryption engines are
NaCl Secretbox Hashicorp Vault (TODO) Transit Secret Built-in secretbox encryption engine Secretbox uses XSalsa20 and Poly1305 to encrypt and authenticate messages with secret-key cryptography.
For example, to configure the built-in secretbox encryption engine, you can set a list of secret keys to use. The first key is always the secret key for encryption, and all the keys will be used for decryption, which allows key rotation.</description></item><item><title>6. Hash</title><link>/docs/overview/hash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/hash/</guid><description>Supported Hashing Algorithms OPV&amp;rsquo;s hash function is designed to generate consistent hash so that we can enable optional equal-match search without storing the plaintext of PII information. Currently supported hash algorithms are
Scrypt SHA3 (keccak256)</description></item></channel></rss>