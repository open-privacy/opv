<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Open Privacy Vault on</title><link>/</link><description>Recent content in Open Privacy Vault on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:47:36 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Introduction</title><link>/docs/overview/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/introduction/</guid><description>Open Privacy Vault (OPV) - Secure, Performant, Open Source PII as a Service. The goal of OPV is to provide an open standard of PII management. With Structural PII validation, performant APIs, pluggable databases, extendabale encryption and hashing engine, flexible policy and authorization, we are aiming to bring the highest open standard for the fair usage of PII.
Quick Start Running Local OPV Note that all the configuration of OPV is done through environment variables.</description></item><item><title>Playground</title><link>/docs/development/playground/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/playground/</guid><description>üëâ All the testing grant tokens or API tokens used below are for demo purpose only. Data Plane Demo Playground demo of tokenization and detokenization via the Data Plane: https://playground.openprivacy.io.
For tokenization, we are using a public OPV grant token that&amp;rsquo;s only writtable to data plane&amp;rsquo;s /js/v1/facts route. For detokenization, we are using a private OPV grant token that&amp;rsquo;s only readable to data plane&amp;rsquo;s /api/v1/facts/* route. Note that we highly recommend one don&amp;rsquo;t expose the token with read permissions to the public JavaScript client.</description></item><item><title>2. Architecture</title><link>/docs/overview/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/architecture/</guid><description>Network Components Data Models OPV features a pluggable database repository pattern. Currently the core data models are:
* Domain * Scope * Fact * FactType * Grant * API Audit Database doc can be generated by make tbls, and the detailed README can be found on dbdoc.</description></item><item><title>Data Plane API</title><link>/docs/development/dataplane_api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/dataplane_api/</guid><description>Sample Instructions:
Click &amp;ldquo;Authorize&amp;rdquo; and add a sandbox testing grant token v1:sandbox.example.com:Iy8TJZcuhicocCklFdwA. Click &amp;ldquo;POST /facts&amp;rdquo; and &amp;ldquo;Try it out&amp;rdquo;. Test APIs like create fact with a payload like the following { &amp;#34;fact_type_slug&amp;#34;: &amp;#34;ssn&amp;#34;, &amp;#34;scope_custom_id&amp;#34;: &amp;#34;customer_123&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;123-45-6789&amp;#34; }</description></item><item><title>3. Planes</title><link>/docs/overview/planes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/planes/</guid><description>Planes are separated entrypoints and ports to access different segments of OPV. Currently OPV supports the following planes:
Control Plane Data Plane Proxy Plane Control Plane Control plane (default port: 27999) is a group of controllers that handle the admin related logic. In your network, you should do your best to isolate the access to the control plane.
üî•Ô∏è Please don't expose control plane to the public network. Control plane securely manages the following data models:</description></item><item><title>Control Plane API</title><link>/docs/development/controlplane_api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/controlplane_api/</guid><description>TODO</description></item><item><title>4. Env Configuration</title><link>/docs/overview/env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/env/</guid><description>OPV&amp;rsquo;s configuration is currently done via environment variables. Please follow the source code and comments.
env.go</description></item><item><title>Proxy Plane Config</title><link>/docs/development/proxyplane_config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/proxyplane_config/</guid><description>TODO</description></item><item><title>5. Encryption</title><link>/docs/overview/encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/encryption/</guid><description>Supported Encryption Engine OPV&amp;rsquo;s encryption is designed to work with multiple encryption engines. Currently supported encryption engines are
NaCl Secretbox Hashicorp Vault (TODO) Transit Secret Built-in secretbox encryption engine Secretbox uses XSalsa20 and Poly1305 to encrypt and authenticate messages with secret-key cryptography.
For example, to configure the built-in secretbox encryption engine, you can set a list of secret keys to use. The first key is always the secret key for encryption, and all the keys will be used for decryption, which allows key rotation.</description></item><item><title>Working with Source Code</title><link>/docs/development/source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/source/</guid><description>Development related commands can be found in the Makefile file.
Compile from the source Make sure you have go, make, docker, and docker-compose installed.
# Prepare dependencies make vendor # Compile and run the data plane and control plane make run One can open the local swagger UI to test the APIs:
Default DataPlane Swagger URL: http://127.0.0.1:28000/swagger/index.html Default ControlPlane Swagger URL: http://127.0.0.1:27999/swagger/index.html # Compile and run the proxy plane # It requires at least a &amp;#34;GET/POST /api/v1/facts&amp;#34; grant token to work OPV_PROXY_PLANE_DEFAULT_DP_GRANT_TOKEN=v1:sandbox.</description></item></channel></rss>