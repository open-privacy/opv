// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/open-privacy-vault/opv/ent/fact"
	"github.com/open-privacy-vault/opv/ent/scope"
)

// Fact is the model entity for the Fact schema.
type Fact struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// EncryptedValue holds the value of the "encrypted_value" field.
	EncryptedValue []byte `json:"encrypted_value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FactQuery when eager-loading is set.
	Edges       FactEdges `json:"edges"`
	scope_facts *uuid.UUID
}

// FactEdges holds the relations/edges for other nodes in the graph.
type FactEdges struct {
	// Scope holds the value of the scope edge.
	Scope *Scope `json:"scope,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ScopeOrErr returns the Scope value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FactEdges) ScopeOrErr() (*Scope, error) {
	if e.loadedTypes[0] {
		if e.Scope == nil {
			// The edge scope was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: scope.Label}
		}
		return e.Scope, nil
	}
	return nil, &NotLoadedError{edge: "scope"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fact) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fact.FieldEncryptedValue:
			values[i] = &[]byte{}
		case fact.FieldCreatedAt, fact.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		case fact.FieldID:
			values[i] = &uuid.UUID{}
		case fact.ForeignKeys[0]: // scope_facts
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Fact", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fact fields.
func (f *Fact) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fact.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case fact.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case fact.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case fact.FieldEncryptedValue:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field encrypted_value", values[i])
			} else if value != nil {
				f.EncryptedValue = *value
			}
		case fact.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field scope_facts", values[i])
			} else if value != nil {
				f.scope_facts = value
			}
		}
	}
	return nil
}

// QueryScope queries the "scope" edge of the Fact entity.
func (f *Fact) QueryScope() *ScopeQuery {
	return (&FactClient{config: f.config}).QueryScope(f)
}

// Update returns a builder for updating this Fact.
// Note that you need to call Fact.Unwrap() before calling this method if this Fact
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fact) Update() *FactUpdateOne {
	return (&FactClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Fact entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Fact) Unwrap() *Fact {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fact is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fact) String() string {
	var builder strings.Builder
	builder.WriteString("Fact(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", encrypted_value=")
	builder.WriteString(fmt.Sprintf("%v", f.EncryptedValue))
	builder.WriteByte(')')
	return builder.String()
}

// Facts is a parsable slice of Fact.
type Facts []*Fact

func (f Facts) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
