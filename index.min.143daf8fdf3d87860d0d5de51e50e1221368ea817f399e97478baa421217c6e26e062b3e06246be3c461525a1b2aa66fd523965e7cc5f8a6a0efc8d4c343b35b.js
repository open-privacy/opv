var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch({preset:'score',cache:!0,doc:{id:'id',field:['title','description','content'],store:['href','title','description']}}),c=[{id:0,href:"/docs/overview/introduction/",title:"1. Introduction",description:"Open Privacy Vault - Secure, Performant, Open Source PII as a Service.",content:`Open Privacy Vault - Secure, Performant, Open Source PII as a Service.
Quick Start Running Local OPV Start from source code:
git clone https://github.com/open-privacy/opv cd opv make vendor make run Start from docker image. You may need to start control plane and data plane separatedly.
docker run -it -v /tmp/opv_data:/data -p 28000:28000 openprivacyio/opv dataplane docker run -it -v /tmp/opv_data:/data -p 27999:27999 openprivacyio/opv controlplane APIs For more information, please take a look at
 Data Plane API â†’ Control Plane API â†’  Now you can test the APIs with curl.
# Create a new grant token from the control plane http://127.0.0.1:27999 curl -X POST &#39;http://127.0.0.1:27999/api/v1/grants&#39; \ --header &#39;Content-Type: application/json&#39; \ --data-raw &#39;{ &#34;allowed_http_methods&#34;: [&#34;*&#34;], &#34;domain&#34;: &#34;test.com&#34; }&#39; # The response will give you a grant token for data plane access # You can pass the token via HTTP header X-OPV-GRANT-TOKEN { &#34;token&#34;: &#34;v1:test.com:6yBQzIcZUaypri8iysut&#34;, &#34;domain&#34;: &#34;test.com&#34;, &#34;allowed_http_methods&#34;: [&#34;*&#34;] } # Store a new fact by calling the data plane http://127.0.0.1:28000 # Please replace the token with the token you just got above curl -X POST &#39;http://127.0.0.1:28000/api/v1/facts&#39; \ -H &#39;Content-Type: application/json&#39; \ -H &#39;X-OPV-GRANT-TOKEN: v1:test.com:your_new_token&#39; \ --data-raw &#39;{ &#34;fact_type_slug&#34;: &#34;ssn&#34;, &#34;value&#34;: &#34;123-45-6789&#34; }&#39; Swagger UI One can open the local swagger UI to test the APIs:
 Default DataPlane Swagger URL: http://127.0.0.1:28000/swagger/index.html Default ControlPlane Swagger URL: http://127.0.0.1:27999/swagger/index.html  Performance We are expecting to see P99 &lt; 10ms latency when sending GET requests to /api/v1/facts/:id, which is the most heavily used endpoint to retrieve PIIs from a tokinized fact.
#!/bin/sh  # Make sure you have vegeta downlaoded. https://github.com/tsenart/vegeta # Replace the X-Opv-Grant-Token and fact_id for the benchmark script echo $&#39;GET http://127.0.0.1:28000/api/v1/facts/fact_1LqMuvudjA1xdtqbjd0l \nX-Opv-Grant-Token: v1:example.com:gCPMdjk1650km2IA3sgZ&#39; \  | vegeta attack -duration=10s | vegeta report # Example of the result # $ sh vegeta.sh # Requests [total, rate, throughput] 500, 50.11, 50.11 # Duration [total, attack, wait] 9.978s, 9.977s, 1.17ms # Latencies [min, mean, 50, 90, 95, 99, max] 753.995Âµs, 1.679ms, 1.415ms, 2.564ms, 3.061ms, 6.926ms, 12.096ms # Bytes In [total, mean] 62000, 124.00 # Bytes Out [total, mean] 0, 0.00 # Success [ratio] 100.00% # Status Codes [code:count] 200:500 # Error Set: One can also launch the benchmark tests with prometheus and grafana to closely monitor the performance.
cd ./benchmark docker-compse up --build `},{id:1,href:"/docs/development/dataplane_api/",title:"Data Plane API",description:"Data Plane API",content:` `},{id:2,href:"/docs/overview/architecture/",title:"2. Architecture",description:"OPV Architecture",content:`Network Components Data Models `},{id:3,href:"/docs/development/controlplane_api/",title:"Control Plane API",description:"Control Plane API",content:`TODO
`},{id:4,href:"/docs/overview/planes/",title:"3. Planes",description:"OPV Planes",content:`Planes are separated entrypoints and ports to access different segments of OPV. Currently OPV is planning to support the following planes:
 Control Plane Data Plane Proxy Plane (TODO)  Control Plane Control plane (default port: 27999) is a group of controllers that handle the admin related logic. In your network, you should do your best to isolate the access to the control plane.
ðŸ‘‰ Please don't expose control plane to the public network.  Control plane securely manages the following data models:
 Grant Grant Token Grant Permissions  Data Plane Data plane (default port: 28000) is a group of controllers that handle the crud logic related to PII information.
Data plane securely manages the following data models:
 Scope Fact Fact Types  Proxy Plane (TODO) Proxy plane will handle multiple protocols' (e.g. HTTP, SMTP, and etc.) requests and responses rewrite on-the-fly with PII tokenization rules.
`},{id:5,href:"/docs/development/playground/",title:"Playground",description:"OPV Playground",content:`PII Tokenization Demo Testing via the Data Plane of https://playground.openprivacy.io.
  Checkr API Proxy Demo  `},{id:6,href:"/docs/overview/env/",title:"4. Env Configuration",description:"OPV Environment Variables Configuration",content:`OPV&rsquo;s configuration is currently done via environment variables. Please follow the source code and comments.
env.go
`},{id:7,href:"/docs/development/source/",title:"Source Code",description:"Go Source Code Development.",content:`Development related commands can be found in the Makefile file.
Compile from the source Make sure you have go, make, docker, and docker-compose installed.
# Prepare dependencies and compile opv make vendor make run One can open the local swagger UI to test the APIs:
 Default DataPlane Swagger URL: http://127.0.0.1:28000/swagger/index.html Default ControlPlane Swagger URL: http://127.0.0.1:27999/swagger/index.html  Generate swagger 2.0 When you make any change to APIs (e.g. pkg/dataplane, pkg/controlplane, pkg/apimodel), you may want to regenerate the swagger 2.0 API doc. This is done by swag.
# Regenerate swagger 2.0 docs make swag Notice that dataplane and controlplane&rsquo;s entrypoints are separated, and they are defined in cmd/dataplane and cmd/controlplane.
Generate ent models If you want to migrate or change the schema of the data models, please change the schema files and then run the following command to re-generate the ent related data models.
# Regenerate ent data models make ent Note that ent will run the auto migration for schema changes.
Tests Unit tests:
make test Functional tests (i.e. the integration tests):
make local_functional_test `},{id:8,href:"/docs/overview/encryption/",title:"5. Encryption",description:"OPV Encryption",content:`Supported Encryption Engine OPV&rsquo;s encryption is designed to work with multiple encryption engines. Currently supported encryption engines are
 NaCl  Secretbox   Hashicorp Vault (TODO)  Transit Secret    Built-in secretbox encryption engine Secretbox uses XSalsa20 and Poly1305 to encrypt and authenticate messages with secret-key cryptography.
For example, to configure the built-in secretbox encryption engine, you can set a list of secret keys to use. The first key is always the secret key for encryption, and all the keys will be used for decryption, which allows key rotation.
OPV_ENCRYPTOR_SECRETBOX_KEYS=&#34;GKVB40Yk4JUQno9CVIKxH2uK343GHMVE,Y3XkLGAVQYnRNt1kXO6xyHhoY2pYeieh&#34; Make sure you use a secure random string generator with 32 bytes.
Hashicorp Vault Transit Secret Engine TODO
Encryption Engine Configuration For more details, see Env Configuration â†’.
`},{id:9,href:"/docs/development/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:`How to migrate database? By default, OPV uses ent for auto migration. If the OPV_DB_DRIVER and OPV_DB_CONNECTION_STR is set corrently with the right database permission, OPV will run the database migration on startup (including both dataplane and controlplane).
`},{id:10,href:"/docs/overview/hash/",title:"6. Hash",description:"OPV Hash",content:`Supported Hashing Algorithms OPV&rsquo;s hash function is designed to generate consistent hash so that we can enable optional equal-match search without storing the plaintext of PII information. Currently supported hash algorithms are
 Scrypt SHA3 (keccak256)  `},{id:11,href:"/docs/overview/auth/",title:"7. Auth",description:"OPV Authn and Authz",content:`Authentication OPV uses Key-Auth (HTTP Header X-OPV-GRANT-TOKEN) for authentication. Notice that by default any request to the data plane (except /api/v1/healthz checks) should be authenticated.
Authorization OPV uses casbin for authorization. We leverage the RBAC with multi domain model to have fine-grained access control of the Grant Token. See RBAC model definition.
# RBAC with domain pattern model # https://github.com/casbin/casbin/blob/master/examples/rbac_with_domain_pattern_model.conf [request_definition] r = sub, dom, obj, act [policy_definition] p = sub, dom, obj, act, eft [role_definition] g = _, _, _ [policy_effect] e = some(where (p.eft == allow)) &amp;&amp; !some(where (p.eft == deny)) [matchers] m = g(r.sub, p.sub, r.dom) &amp;&amp; keyMatch(r.dom, p.dom) &amp;&amp; keyMatch2(r.obj, p.obj) &amp;&amp; regexMatch(r.act, p.act) `},{id:12,href:"/docs/overview/database/",title:"8. Database",description:"OPV Database",content:`Supported databases  MySQL Vitess(MySQL driver) PostgreSQL SQLite MongoDB (TODO) DocumentDB (TODO) DynamoDB (TODO) Redis (TODO)  Currently, OPV uses the ent framework to connect to SQL databases.
`},{id:13,href:"/docs/overview/fact_types/",title:"9. PII Fact Types",description:"OPV PII Fact Types",content:`Built-in Fact Types OPV supports a long list of built-in fact types to determine . For example email, ssn, ssnstrict, phonenumber, and etc. The full list of the current fact types can be found at
curl --request GET \  --url http://127.0.0.1:28000/api/v1/fact_types \  --header &#39;x-opv-grant-token: v1:example.com:yourtoken&#39; Example of the built-in fact type slugs:
[ &#34;IMEI&#34;, &#34;ISO3166Alpha2&#34;, &#34;ISO3166Alpha3&#34;, &#34;ISO4217&#34;, &#34;address&#34;, &#34;alpha&#34;, &#34;alphanum&#34;, &#34;ascii&#34;, &#34;base64&#34;, &#34;creditcard&#34;, &#34;datauri&#34;, &#34;dialstring&#34;, &#34;dns&#34;, &#34;email&#34;, &#34;float&#34;, &#34;fullwidth&#34;, &#34;halfwidth&#34;, &#34;hexadecimal&#34;, &#34;hexcolor&#34;, &#34;host&#34;, &#34;int&#34;, &#34;ip&#34;, &#34;ipv4&#34;, &#34;ipv6&#34;, &#34;isbn10&#34;, &#34;isbn13&#34;, &#34;json&#34;, &#34;latitude&#34;, &#34;longitude&#34;, &#34;lowercase&#34;, &#34;mac&#34;, &#34;multibyte&#34;, &#34;notnull&#34;, &#34;null&#34;, &#34;numeric&#34;, &#34;phonenumber&#34;, &#34;photourl&#34;, &#34;port&#34;, &#34;printableascii&#34;, &#34;requri&#34;, &#34;requrl&#34;, &#34;rfc3339&#34;, &#34;rfc3339WithoutZone&#34;, &#34;rgbcolor&#34;, &#34;semver&#34;, &#34;ssn&#34;, &#34;ssnstrict&#34;, &#34;uppercase&#34;, &#34;url&#34;, &#34;utfdigit&#34;, &#34;utfletter&#34;, &#34;utfletternum&#34;, &#34;utfnumeric&#34;, &#34;uuid&#34;, &#34;uuidv3&#34;, &#34;uuidv4&#34;, &#34;uuidv5&#34;, &#34;variablewidth&#34;, ] `},{id:14,href:"/docs/development/",title:"Development",description:"Development for OPV",content:``},{id:15,href:"/docs/",title:"Overview",description:"OPV Documentation Overview",content:``},{id:16,href:"/docs/overview/",title:"Overview",description:"Overview of OPV",content:``}];b.add(c),userinput.addEventListener('input',e,!0),suggestions.addEventListener('click',f,!0);function e(){var g=this.value,e=b.search(g,5),f=suggestions.childNodes,h=0,i=e.length,c;for(suggestions.classList.remove('d-none'),e.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.href,t.textContent=b.title,d.textContent=b.description,suggestions.appendChild(c)});f.length>i;)suggestions.removeChild(f[h])}function f(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()