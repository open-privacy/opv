// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/open-privacy/opv/pkg/ent/facttype"
)

// FactType is the model entity for the FactType schema.
type FactType struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// BuiltIn holds the value of the "built_in" field.
	BuiltIn bool `json:"built_in,omitempty"`
	// Validation holds the value of the "validation" field.
	Validation string `json:"validation,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FactTypeQuery when eager-loading is set.
	Edges FactTypeEdges `json:"edges"`
}

// FactTypeEdges holds the relations/edges for other nodes in the graph.
type FactTypeEdges struct {
	// Facts holds the value of the facts edge.
	Facts []*Fact `json:"facts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FactsOrErr returns the Facts value or an error if the edge
// was not loaded in eager-loading.
func (e FactTypeEdges) FactsOrErr() ([]*Fact, error) {
	if e.loadedTypes[0] {
		return e.Facts, nil
	}
	return nil, &NotLoadedError{edge: "facts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FactType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case facttype.FieldBuiltIn:
			values[i] = &sql.NullBool{}
		case facttype.FieldID, facttype.FieldSlug, facttype.FieldValidation:
			values[i] = &sql.NullString{}
		case facttype.FieldCreatedAt, facttype.FieldUpdatedAt, facttype.FieldDeletedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type FactType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FactType fields.
func (ft *FactType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case facttype.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ft.ID = value.String
			}
		case facttype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ft.CreatedAt = value.Time
			}
		case facttype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ft.UpdatedAt = value.Time
			}
		case facttype.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ft.DeletedAt = value.Time
			}
		case facttype.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				ft.Slug = value.String
			}
		case facttype.FieldBuiltIn:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field built_in", values[i])
			} else if value.Valid {
				ft.BuiltIn = value.Bool
			}
		case facttype.FieldValidation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validation", values[i])
			} else if value.Valid {
				ft.Validation = value.String
			}
		}
	}
	return nil
}

// QueryFacts queries the "facts" edge of the FactType entity.
func (ft *FactType) QueryFacts() *FactQuery {
	return (&FactTypeClient{config: ft.config}).QueryFacts(ft)
}

// Update returns a builder for updating this FactType.
// Note that you need to call FactType.Unwrap() before calling this method if this FactType
// was returned from a transaction, and the transaction was committed or rolled back.
func (ft *FactType) Update() *FactTypeUpdateOne {
	return (&FactTypeClient{config: ft.config}).UpdateOne(ft)
}

// Unwrap unwraps the FactType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ft *FactType) Unwrap() *FactType {
	tx, ok := ft.config.driver.(*txDriver)
	if !ok {
		panic("ent: FactType is not a transactional entity")
	}
	ft.config.driver = tx.drv
	return ft
}

// String implements the fmt.Stringer.
func (ft *FactType) String() string {
	var builder strings.Builder
	builder.WriteString("FactType(")
	builder.WriteString(fmt.Sprintf("id=%v", ft.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ft.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ft.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(ft.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", slug=")
	builder.WriteString(ft.Slug)
	builder.WriteString(", built_in=")
	builder.WriteString(fmt.Sprintf("%v", ft.BuiltIn))
	builder.WriteString(", validation=")
	builder.WriteString(ft.Validation)
	builder.WriteByte(')')
	return builder.String()
}

// FactTypes is a parsable slice of FactType.
type FactTypes []*FactType

func (ft FactTypes) config(cfg config) {
	for _i := range ft {
		ft[_i].config = cfg
	}
}
