// Code generated by entc, DO NOT EDIT.

package facttype

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-privacy/opv/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlug), v))
	})
}

// Builtin applies equality check predicate on the "builtin" field. It's identical to BuiltinEQ.
func Builtin(v bool) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBuiltin), v))
	})
}

// Validation applies equality check predicate on the "validation" field. It's identical to ValidationEQ.
func Validation(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValidation), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FactType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FactType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FactType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FactType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FactType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FactType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FactType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FactType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlug), v))
	})
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSlug), v))
	})
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.FactType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FactType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSlug), v...))
	})
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.FactType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FactType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSlug), v...))
	})
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSlug), v))
	})
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSlug), v))
	})
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSlug), v))
	})
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSlug), v))
	})
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSlug), v))
	})
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSlug), v))
	})
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSlug), v))
	})
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSlug), v))
	})
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSlug), v))
	})
}

// BuiltinEQ applies the EQ predicate on the "builtin" field.
func BuiltinEQ(v bool) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBuiltin), v))
	})
}

// BuiltinNEQ applies the NEQ predicate on the "builtin" field.
func BuiltinNEQ(v bool) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBuiltin), v))
	})
}

// ValidationEQ applies the EQ predicate on the "validation" field.
func ValidationEQ(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValidation), v))
	})
}

// ValidationNEQ applies the NEQ predicate on the "validation" field.
func ValidationNEQ(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValidation), v))
	})
}

// ValidationIn applies the In predicate on the "validation" field.
func ValidationIn(vs ...string) predicate.FactType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FactType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldValidation), v...))
	})
}

// ValidationNotIn applies the NotIn predicate on the "validation" field.
func ValidationNotIn(vs ...string) predicate.FactType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FactType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldValidation), v...))
	})
}

// ValidationGT applies the GT predicate on the "validation" field.
func ValidationGT(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldValidation), v))
	})
}

// ValidationGTE applies the GTE predicate on the "validation" field.
func ValidationGTE(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldValidation), v))
	})
}

// ValidationLT applies the LT predicate on the "validation" field.
func ValidationLT(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldValidation), v))
	})
}

// ValidationLTE applies the LTE predicate on the "validation" field.
func ValidationLTE(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldValidation), v))
	})
}

// ValidationContains applies the Contains predicate on the "validation" field.
func ValidationContains(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldValidation), v))
	})
}

// ValidationHasPrefix applies the HasPrefix predicate on the "validation" field.
func ValidationHasPrefix(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldValidation), v))
	})
}

// ValidationHasSuffix applies the HasSuffix predicate on the "validation" field.
func ValidationHasSuffix(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldValidation), v))
	})
}

// ValidationIsNil applies the IsNil predicate on the "validation" field.
func ValidationIsNil() predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldValidation)))
	})
}

// ValidationNotNil applies the NotNil predicate on the "validation" field.
func ValidationNotNil() predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldValidation)))
	})
}

// ValidationEqualFold applies the EqualFold predicate on the "validation" field.
func ValidationEqualFold(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldValidation), v))
	})
}

// ValidationContainsFold applies the ContainsFold predicate on the "validation" field.
func ValidationContainsFold(v string) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldValidation), v))
	})
}

// HasFacts applies the HasEdge predicate on the "facts" edge.
func HasFacts() predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FactsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FactsTable, FactsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFactsWith applies the HasEdge predicate on the "facts" edge with a given conditions (other predicates).
func HasFactsWith(preds ...predicate.Fact) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FactsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FactsTable, FactsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FactType) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FactType) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FactType) predicate.FactType {
	return predicate.FactType(func(s *sql.Selector) {
		p(s.Not())
	})
}
