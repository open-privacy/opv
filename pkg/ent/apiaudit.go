// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/open-privacy/opv/pkg/ent/apiaudit"
)

// APIAudit is the model entity for the APIAudit schema.
type APIAudit struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Plane holds the value of the "plane" field.
	Plane string `json:"plane,omitempty"`
	// HashedGrantToken holds the value of the "hashed_grant_token" field.
	HashedGrantToken string `json:"-"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// HTTPPath holds the value of the "http_path" field.
	HTTPPath string `json:"http_path,omitempty"`
	// HTTPMethod holds the value of the "http_method" field.
	HTTPMethod string `json:"http_method,omitempty"`
	// SentHTTPStatus holds the value of the "sent_http_status" field.
	SentHTTPStatus int `json:"sent_http_status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*APIAudit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case apiaudit.FieldSentHTTPStatus:
			values[i] = &sql.NullInt64{}
		case apiaudit.FieldID, apiaudit.FieldPlane, apiaudit.FieldHashedGrantToken, apiaudit.FieldDomain, apiaudit.FieldHTTPPath, apiaudit.FieldHTTPMethod:
			values[i] = &sql.NullString{}
		case apiaudit.FieldCreatedAt, apiaudit.FieldUpdatedAt, apiaudit.FieldDeletedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type APIAudit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the APIAudit fields.
func (aa *APIAudit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apiaudit.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				aa.ID = value.String
			}
		case apiaudit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aa.CreatedAt = value.Time
			}
		case apiaudit.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aa.UpdatedAt = value.Time
			}
		case apiaudit.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				aa.DeletedAt = value.Time
			}
		case apiaudit.FieldPlane:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plane", values[i])
			} else if value.Valid {
				aa.Plane = value.String
			}
		case apiaudit.FieldHashedGrantToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_grant_token", values[i])
			} else if value.Valid {
				aa.HashedGrantToken = value.String
			}
		case apiaudit.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				aa.Domain = value.String
			}
		case apiaudit.FieldHTTPPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field http_path", values[i])
			} else if value.Valid {
				aa.HTTPPath = value.String
			}
		case apiaudit.FieldHTTPMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field http_method", values[i])
			} else if value.Valid {
				aa.HTTPMethod = value.String
			}
		case apiaudit.FieldSentHTTPStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sent_http_status", values[i])
			} else if value.Valid {
				aa.SentHTTPStatus = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this APIAudit.
// Note that you need to call APIAudit.Unwrap() before calling this method if this APIAudit
// was returned from a transaction, and the transaction was committed or rolled back.
func (aa *APIAudit) Update() *APIAuditUpdateOne {
	return (&APIAuditClient{config: aa.config}).UpdateOne(aa)
}

// Unwrap unwraps the APIAudit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aa *APIAudit) Unwrap() *APIAudit {
	tx, ok := aa.config.driver.(*txDriver)
	if !ok {
		panic("ent: APIAudit is not a transactional entity")
	}
	aa.config.driver = tx.drv
	return aa
}

// String implements the fmt.Stringer.
func (aa *APIAudit) String() string {
	var builder strings.Builder
	builder.WriteString("APIAudit(")
	builder.WriteString(fmt.Sprintf("id=%v", aa.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(aa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(aa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", deleted_at=")
	builder.WriteString(aa.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", plane=")
	builder.WriteString(aa.Plane)
	builder.WriteString(", hashed_grant_token=<sensitive>")
	builder.WriteString(", domain=")
	builder.WriteString(aa.Domain)
	builder.WriteString(", http_path=")
	builder.WriteString(aa.HTTPPath)
	builder.WriteString(", http_method=")
	builder.WriteString(aa.HTTPMethod)
	builder.WriteString(", sent_http_status=")
	builder.WriteString(fmt.Sprintf("%v", aa.SentHTTPStatus))
	builder.WriteByte(')')
	return builder.String()
}

// APIAudits is a parsable slice of APIAudit.
type APIAudits []*APIAudit

func (aa APIAudits) config(cfg config) {
	for _i := range aa {
		aa[_i].config = cfg
	}
}
