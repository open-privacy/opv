// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-privacy/opv/pkg/ent/grant"
)

// GrantCreate is the builder for creating a Grant entity.
type GrantCreate struct {
	config
	mutation *GrantMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gc *GrantCreate) SetCreatedAt(t time.Time) *GrantCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GrantCreate) SetNillableCreatedAt(t *time.Time) *GrantCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GrantCreate) SetUpdatedAt(t time.Time) *GrantCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GrantCreate) SetNillableUpdatedAt(t *time.Time) *GrantCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetDeletedAt sets the "deleted_at" field.
func (gc *GrantCreate) SetDeletedAt(t time.Time) *GrantCreate {
	gc.mutation.SetDeletedAt(t)
	return gc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gc *GrantCreate) SetNillableDeletedAt(t *time.Time) *GrantCreate {
	if t != nil {
		gc.SetDeletedAt(*t)
	}
	return gc
}

// SetHashedToken sets the "hashed_token" field.
func (gc *GrantCreate) SetHashedToken(s string) *GrantCreate {
	gc.mutation.SetHashedToken(s)
	return gc
}

// SetDomain sets the "domain" field.
func (gc *GrantCreate) SetDomain(s string) *GrantCreate {
	gc.mutation.SetDomain(s)
	return gc
}

// SetVersion sets the "version" field.
func (gc *GrantCreate) SetVersion(s string) *GrantCreate {
	gc.mutation.SetVersion(s)
	return gc
}

// SetAllowedHTTPMethods sets the "allowed_http_methods" field.
func (gc *GrantCreate) SetAllowedHTTPMethods(s string) *GrantCreate {
	gc.mutation.SetAllowedHTTPMethods(s)
	return gc
}

// SetID sets the "id" field.
func (gc *GrantCreate) SetID(s string) *GrantCreate {
	gc.mutation.SetID(s)
	return gc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gc *GrantCreate) SetNillableID(s *string) *GrantCreate {
	if s != nil {
		gc.SetID(*s)
	}
	return gc
}

// Mutation returns the GrantMutation object of the builder.
func (gc *GrantCreate) Mutation() *GrantMutation {
	return gc.mutation
}

// Save creates the Grant in the database.
func (gc *GrantCreate) Save(ctx context.Context) (*Grant, error) {
	var (
		err  error
		node *Grant
	)
	gc.defaults()
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GrantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			node, err = gc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			mut = gc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GrantCreate) SaveX(ctx context.Context) *Grant {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (gc *GrantCreate) defaults() {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		v := grant.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		v := grant.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gc.mutation.ID(); !ok {
		v := grant.DefaultID()
		gc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GrantCreate) check() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := gc.mutation.HashedToken(); !ok {
		return &ValidationError{Name: "hashed_token", err: errors.New("ent: missing required field \"hashed_token\"")}
	}
	if _, ok := gc.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New("ent: missing required field \"domain\"")}
	}
	if _, ok := gc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New("ent: missing required field \"version\"")}
	}
	if _, ok := gc.mutation.AllowedHTTPMethods(); !ok {
		return &ValidationError{Name: "allowed_http_methods", err: errors.New("ent: missing required field \"allowed_http_methods\"")}
	}
	return nil
}

func (gc *GrantCreate) sqlSave(ctx context.Context) (*Grant, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (gc *GrantCreate) createSpec() (*Grant, *sqlgraph.CreateSpec) {
	var (
		_node = &Grant{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: grant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: grant.FieldID,
			},
		}
	)
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grant.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grant.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: grant.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := gc.mutation.HashedToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grant.FieldHashedToken,
		})
		_node.HashedToken = value
	}
	if value, ok := gc.mutation.Domain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grant.FieldDomain,
		})
		_node.Domain = value
	}
	if value, ok := gc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grant.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := gc.mutation.AllowedHTTPMethods(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grant.FieldAllowedHTTPMethods,
		})
		_node.AllowedHTTPMethods = value
	}
	return _node, _spec
}

// GrantCreateBulk is the builder for creating many Grant entities in bulk.
type GrantCreateBulk struct {
	config
	builders []*GrantCreate
}

// Save creates the Grant entities in the database.
func (gcb *GrantCreateBulk) Save(ctx context.Context) ([]*Grant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Grant, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GrantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GrantCreateBulk) SaveX(ctx context.Context) []*Grant {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
