// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-privacy/opv/pkg/ent/fact"
	"github.com/open-privacy/opv/pkg/ent/facttype"
	"github.com/open-privacy/opv/pkg/ent/predicate"
	"github.com/open-privacy/opv/pkg/ent/scope"
)

// FactUpdate is the builder for updating Fact entities.
type FactUpdate struct {
	config
	hooks    []Hook
	mutation *FactMutation
}

// Where adds a new predicate for the FactUpdate builder.
func (fu *FactUpdate) Where(ps ...predicate.Fact) *FactUpdate {
	fu.mutation.predicates = append(fu.mutation.predicates, ps...)
	return fu
}

// SetHashedValue sets the "hashed_value" field.
func (fu *FactUpdate) SetHashedValue(s string) *FactUpdate {
	fu.mutation.SetHashedValue(s)
	return fu
}

// SetEncryptedValue sets the "encrypted_value" field.
func (fu *FactUpdate) SetEncryptedValue(s string) *FactUpdate {
	fu.mutation.SetEncryptedValue(s)
	return fu
}

// SetDomain sets the "domain" field.
func (fu *FactUpdate) SetDomain(s string) *FactUpdate {
	fu.mutation.SetDomain(s)
	return fu
}

// SetScopeID sets the "scope" edge to the Scope entity by ID.
func (fu *FactUpdate) SetScopeID(id string) *FactUpdate {
	fu.mutation.SetScopeID(id)
	return fu
}

// SetNillableScopeID sets the "scope" edge to the Scope entity by ID if the given value is not nil.
func (fu *FactUpdate) SetNillableScopeID(id *string) *FactUpdate {
	if id != nil {
		fu = fu.SetScopeID(*id)
	}
	return fu
}

// SetScope sets the "scope" edge to the Scope entity.
func (fu *FactUpdate) SetScope(s *Scope) *FactUpdate {
	return fu.SetScopeID(s.ID)
}

// SetFactTypeID sets the "fact_type" edge to the FactType entity by ID.
func (fu *FactUpdate) SetFactTypeID(id string) *FactUpdate {
	fu.mutation.SetFactTypeID(id)
	return fu
}

// SetNillableFactTypeID sets the "fact_type" edge to the FactType entity by ID if the given value is not nil.
func (fu *FactUpdate) SetNillableFactTypeID(id *string) *FactUpdate {
	if id != nil {
		fu = fu.SetFactTypeID(*id)
	}
	return fu
}

// SetFactType sets the "fact_type" edge to the FactType entity.
func (fu *FactUpdate) SetFactType(f *FactType) *FactUpdate {
	return fu.SetFactTypeID(f.ID)
}

// Mutation returns the FactMutation object of the builder.
func (fu *FactUpdate) Mutation() *FactMutation {
	return fu.mutation
}

// ClearScope clears the "scope" edge to the Scope entity.
func (fu *FactUpdate) ClearScope() *FactUpdate {
	fu.mutation.ClearScope()
	return fu
}

// ClearFactType clears the "fact_type" edge to the FactType entity.
func (fu *FactUpdate) ClearFactType() *FactUpdate {
	fu.mutation.ClearFactType()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FactUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fu.defaults()
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FactMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FactUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FactUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FactUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FactUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := fact.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

func (fu *FactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fact.Table,
			Columns: fact.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: fact.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fact.FieldUpdatedAt,
		})
	}
	if value, ok := fu.mutation.HashedValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fact.FieldHashedValue,
		})
	}
	if value, ok := fu.mutation.EncryptedValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fact.FieldEncryptedValue,
		})
	}
	if value, ok := fu.mutation.Domain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fact.FieldDomain,
		})
	}
	if fu.mutation.ScopeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fact.ScopeTable,
			Columns: []string{fact.ScopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: scope.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ScopeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fact.ScopeTable,
			Columns: []string{fact.ScopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: scope.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FactTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fact.FactTypeTable,
			Columns: []string{fact.FactTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: facttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FactTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fact.FactTypeTable,
			Columns: []string{fact.FactTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: facttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fact.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FactUpdateOne is the builder for updating a single Fact entity.
type FactUpdateOne struct {
	config
	hooks    []Hook
	mutation *FactMutation
}

// SetHashedValue sets the "hashed_value" field.
func (fuo *FactUpdateOne) SetHashedValue(s string) *FactUpdateOne {
	fuo.mutation.SetHashedValue(s)
	return fuo
}

// SetEncryptedValue sets the "encrypted_value" field.
func (fuo *FactUpdateOne) SetEncryptedValue(s string) *FactUpdateOne {
	fuo.mutation.SetEncryptedValue(s)
	return fuo
}

// SetDomain sets the "domain" field.
func (fuo *FactUpdateOne) SetDomain(s string) *FactUpdateOne {
	fuo.mutation.SetDomain(s)
	return fuo
}

// SetScopeID sets the "scope" edge to the Scope entity by ID.
func (fuo *FactUpdateOne) SetScopeID(id string) *FactUpdateOne {
	fuo.mutation.SetScopeID(id)
	return fuo
}

// SetNillableScopeID sets the "scope" edge to the Scope entity by ID if the given value is not nil.
func (fuo *FactUpdateOne) SetNillableScopeID(id *string) *FactUpdateOne {
	if id != nil {
		fuo = fuo.SetScopeID(*id)
	}
	return fuo
}

// SetScope sets the "scope" edge to the Scope entity.
func (fuo *FactUpdateOne) SetScope(s *Scope) *FactUpdateOne {
	return fuo.SetScopeID(s.ID)
}

// SetFactTypeID sets the "fact_type" edge to the FactType entity by ID.
func (fuo *FactUpdateOne) SetFactTypeID(id string) *FactUpdateOne {
	fuo.mutation.SetFactTypeID(id)
	return fuo
}

// SetNillableFactTypeID sets the "fact_type" edge to the FactType entity by ID if the given value is not nil.
func (fuo *FactUpdateOne) SetNillableFactTypeID(id *string) *FactUpdateOne {
	if id != nil {
		fuo = fuo.SetFactTypeID(*id)
	}
	return fuo
}

// SetFactType sets the "fact_type" edge to the FactType entity.
func (fuo *FactUpdateOne) SetFactType(f *FactType) *FactUpdateOne {
	return fuo.SetFactTypeID(f.ID)
}

// Mutation returns the FactMutation object of the builder.
func (fuo *FactUpdateOne) Mutation() *FactMutation {
	return fuo.mutation
}

// ClearScope clears the "scope" edge to the Scope entity.
func (fuo *FactUpdateOne) ClearScope() *FactUpdateOne {
	fuo.mutation.ClearScope()
	return fuo
}

// ClearFactType clears the "fact_type" edge to the FactType entity.
func (fuo *FactUpdateOne) ClearFactType() *FactUpdateOne {
	fuo.mutation.ClearFactType()
	return fuo
}

// Save executes the query and returns the updated Fact entity.
func (fuo *FactUpdateOne) Save(ctx context.Context) (*Fact, error) {
	var (
		err  error
		node *Fact
	)
	fuo.defaults()
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FactMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FactUpdateOne) SaveX(ctx context.Context) *Fact {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FactUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FactUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FactUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := fact.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

func (fuo *FactUpdateOne) sqlSave(ctx context.Context) (_node *Fact, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fact.Table,
			Columns: fact.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: fact.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Fact.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fact.FieldUpdatedAt,
		})
	}
	if value, ok := fuo.mutation.HashedValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fact.FieldHashedValue,
		})
	}
	if value, ok := fuo.mutation.EncryptedValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fact.FieldEncryptedValue,
		})
	}
	if value, ok := fuo.mutation.Domain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fact.FieldDomain,
		})
	}
	if fuo.mutation.ScopeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fact.ScopeTable,
			Columns: []string{fact.ScopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: scope.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ScopeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fact.ScopeTable,
			Columns: []string{fact.ScopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: scope.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FactTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fact.FactTypeTable,
			Columns: []string{fact.FactTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: facttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FactTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fact.FactTypeTable,
			Columns: []string{fact.FactTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: facttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Fact{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fact.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
