// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/open-privacy/opv/pkg/ent/grant"
)

// Grant is the model entity for the Grant schema.
type Grant struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// HashedGrantToken holds the value of the "hashed_grant_token" field.
	HashedGrantToken string `json:"-"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// AllowedHTTPMethods holds the value of the "allowed_http_methods" field.
	AllowedHTTPMethods string `json:"allowed_http_methods,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Grant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case grant.FieldID, grant.FieldHashedGrantToken, grant.FieldDomain, grant.FieldVersion, grant.FieldAllowedHTTPMethods:
			values[i] = &sql.NullString{}
		case grant.FieldCreatedAt, grant.FieldUpdatedAt, grant.FieldDeletedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Grant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Grant fields.
func (gr *Grant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grant.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gr.ID = value.String
			}
		case grant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gr.CreatedAt = value.Time
			}
		case grant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gr.UpdatedAt = value.Time
			}
		case grant.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gr.DeletedAt = new(time.Time)
				*gr.DeletedAt = value.Time
			}
		case grant.FieldHashedGrantToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_grant_token", values[i])
			} else if value.Valid {
				gr.HashedGrantToken = value.String
			}
		case grant.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				gr.Domain = value.String
			}
		case grant.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				gr.Version = value.String
			}
		case grant.FieldAllowedHTTPMethods:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field allowed_http_methods", values[i])
			} else if value.Valid {
				gr.AllowedHTTPMethods = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Grant.
// Note that you need to call Grant.Unwrap() before calling this method if this Grant
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Grant) Update() *GrantUpdateOne {
	return (&GrantClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the Grant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Grant) Unwrap() *Grant {
	tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Grant is not a transactional entity")
	}
	gr.config.driver = tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Grant) String() string {
	var builder strings.Builder
	builder.WriteString("Grant(")
	builder.WriteString(fmt.Sprintf("id=%v", gr.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(gr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(gr.UpdatedAt.Format(time.ANSIC))
	if v := gr.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", hashed_grant_token=<sensitive>")
	builder.WriteString(", domain=")
	builder.WriteString(gr.Domain)
	builder.WriteString(", version=")
	builder.WriteString(gr.Version)
	builder.WriteString(", allowed_http_methods=")
	builder.WriteString(gr.AllowedHTTPMethods)
	builder.WriteByte(')')
	return builder.String()
}

// Grants is a parsable slice of Grant.
type Grants []*Grant

func (gr Grants) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
