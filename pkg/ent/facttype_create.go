// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/open-privacy/opv/pkg/ent/fact"
	"github.com/open-privacy/opv/pkg/ent/facttype"
)

// FactTypeCreate is the builder for creating a FactType entity.
type FactTypeCreate struct {
	config
	mutation *FactTypeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ftc *FactTypeCreate) SetCreateTime(t time.Time) *FactTypeCreate {
	ftc.mutation.SetCreateTime(t)
	return ftc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ftc *FactTypeCreate) SetNillableCreateTime(t *time.Time) *FactTypeCreate {
	if t != nil {
		ftc.SetCreateTime(*t)
	}
	return ftc
}

// SetUpdateTime sets the "update_time" field.
func (ftc *FactTypeCreate) SetUpdateTime(t time.Time) *FactTypeCreate {
	ftc.mutation.SetUpdateTime(t)
	return ftc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ftc *FactTypeCreate) SetNillableUpdateTime(t *time.Time) *FactTypeCreate {
	if t != nil {
		ftc.SetUpdateTime(*t)
	}
	return ftc
}

// SetID sets the "id" field.
func (ftc *FactTypeCreate) SetID(u uuid.UUID) *FactTypeCreate {
	ftc.mutation.SetID(u)
	return ftc
}

// AddFactIDs adds the "facts" edge to the Fact entity by IDs.
func (ftc *FactTypeCreate) AddFactIDs(ids ...uuid.UUID) *FactTypeCreate {
	ftc.mutation.AddFactIDs(ids...)
	return ftc
}

// AddFacts adds the "facts" edges to the Fact entity.
func (ftc *FactTypeCreate) AddFacts(f ...*Fact) *FactTypeCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ftc.AddFactIDs(ids...)
}

// Mutation returns the FactTypeMutation object of the builder.
func (ftc *FactTypeCreate) Mutation() *FactTypeMutation {
	return ftc.mutation
}

// Save creates the FactType in the database.
func (ftc *FactTypeCreate) Save(ctx context.Context) (*FactType, error) {
	var (
		err  error
		node *FactType
	)
	ftc.defaults()
	if len(ftc.hooks) == 0 {
		if err = ftc.check(); err != nil {
			return nil, err
		}
		node, err = ftc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FactTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ftc.check(); err != nil {
				return nil, err
			}
			ftc.mutation = mutation
			node, err = ftc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ftc.hooks) - 1; i >= 0; i-- {
			mut = ftc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ftc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ftc *FactTypeCreate) SaveX(ctx context.Context) *FactType {
	v, err := ftc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ftc *FactTypeCreate) defaults() {
	if _, ok := ftc.mutation.CreateTime(); !ok {
		v := facttype.DefaultCreateTime()
		ftc.mutation.SetCreateTime(v)
	}
	if _, ok := ftc.mutation.UpdateTime(); !ok {
		v := facttype.DefaultUpdateTime()
		ftc.mutation.SetUpdateTime(v)
	}
	if _, ok := ftc.mutation.ID(); !ok {
		v := facttype.DefaultID()
		ftc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftc *FactTypeCreate) check() error {
	if _, ok := ftc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ftc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	return nil
}

func (ftc *FactTypeCreate) sqlSave(ctx context.Context) (*FactType, error) {
	_node, _spec := ftc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ftc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (ftc *FactTypeCreate) createSpec() (*FactType, *sqlgraph.CreateSpec) {
	var (
		_node = &FactType{config: ftc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: facttype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: facttype.FieldID,
			},
		}
	)
	if id, ok := ftc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ftc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: facttype.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ftc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: facttype.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := ftc.mutation.FactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   facttype.FactsTable,
			Columns: []string{facttype.FactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: fact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FactTypeCreateBulk is the builder for creating many FactType entities in bulk.
type FactTypeCreateBulk struct {
	config
	builders []*FactTypeCreate
}

// Save creates the FactType entities in the database.
func (ftcb *FactTypeCreateBulk) Save(ctx context.Context) ([]*FactType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ftcb.builders))
	nodes := make([]*FactType, len(ftcb.builders))
	mutators := make([]Mutator, len(ftcb.builders))
	for i := range ftcb.builders {
		func(i int, root context.Context) {
			builder := ftcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FactTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ftcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ftcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ftcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ftcb *FactTypeCreateBulk) SaveX(ctx context.Context) []*FactType {
	v, err := ftcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
