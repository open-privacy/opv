// Code generated by entc, DO NOT EDIT.

package fact

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-privacy/opv/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// HashedValue applies equality check predicate on the "hashed_value" field. It's identical to HashedValueEQ.
func HashedValue(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHashedValue), v))
	})
}

// EncryptedValue applies equality check predicate on the "encrypted_value" field. It's identical to EncryptedValueEQ.
func EncryptedValue(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEncryptedValue), v))
	})
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomain), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Fact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fact(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Fact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fact(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Fact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fact(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Fact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fact(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// HashedValueEQ applies the EQ predicate on the "hashed_value" field.
func HashedValueEQ(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHashedValue), v))
	})
}

// HashedValueNEQ applies the NEQ predicate on the "hashed_value" field.
func HashedValueNEQ(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHashedValue), v))
	})
}

// HashedValueIn applies the In predicate on the "hashed_value" field.
func HashedValueIn(vs ...string) predicate.Fact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fact(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHashedValue), v...))
	})
}

// HashedValueNotIn applies the NotIn predicate on the "hashed_value" field.
func HashedValueNotIn(vs ...string) predicate.Fact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fact(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHashedValue), v...))
	})
}

// HashedValueGT applies the GT predicate on the "hashed_value" field.
func HashedValueGT(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHashedValue), v))
	})
}

// HashedValueGTE applies the GTE predicate on the "hashed_value" field.
func HashedValueGTE(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHashedValue), v))
	})
}

// HashedValueLT applies the LT predicate on the "hashed_value" field.
func HashedValueLT(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHashedValue), v))
	})
}

// HashedValueLTE applies the LTE predicate on the "hashed_value" field.
func HashedValueLTE(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHashedValue), v))
	})
}

// HashedValueContains applies the Contains predicate on the "hashed_value" field.
func HashedValueContains(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHashedValue), v))
	})
}

// HashedValueHasPrefix applies the HasPrefix predicate on the "hashed_value" field.
func HashedValueHasPrefix(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHashedValue), v))
	})
}

// HashedValueHasSuffix applies the HasSuffix predicate on the "hashed_value" field.
func HashedValueHasSuffix(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHashedValue), v))
	})
}

// HashedValueEqualFold applies the EqualFold predicate on the "hashed_value" field.
func HashedValueEqualFold(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHashedValue), v))
	})
}

// HashedValueContainsFold applies the ContainsFold predicate on the "hashed_value" field.
func HashedValueContainsFold(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHashedValue), v))
	})
}

// EncryptedValueEQ applies the EQ predicate on the "encrypted_value" field.
func EncryptedValueEQ(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEncryptedValue), v))
	})
}

// EncryptedValueNEQ applies the NEQ predicate on the "encrypted_value" field.
func EncryptedValueNEQ(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEncryptedValue), v))
	})
}

// EncryptedValueIn applies the In predicate on the "encrypted_value" field.
func EncryptedValueIn(vs ...string) predicate.Fact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fact(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEncryptedValue), v...))
	})
}

// EncryptedValueNotIn applies the NotIn predicate on the "encrypted_value" field.
func EncryptedValueNotIn(vs ...string) predicate.Fact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fact(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEncryptedValue), v...))
	})
}

// EncryptedValueGT applies the GT predicate on the "encrypted_value" field.
func EncryptedValueGT(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEncryptedValue), v))
	})
}

// EncryptedValueGTE applies the GTE predicate on the "encrypted_value" field.
func EncryptedValueGTE(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEncryptedValue), v))
	})
}

// EncryptedValueLT applies the LT predicate on the "encrypted_value" field.
func EncryptedValueLT(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEncryptedValue), v))
	})
}

// EncryptedValueLTE applies the LTE predicate on the "encrypted_value" field.
func EncryptedValueLTE(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEncryptedValue), v))
	})
}

// EncryptedValueContains applies the Contains predicate on the "encrypted_value" field.
func EncryptedValueContains(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEncryptedValue), v))
	})
}

// EncryptedValueHasPrefix applies the HasPrefix predicate on the "encrypted_value" field.
func EncryptedValueHasPrefix(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEncryptedValue), v))
	})
}

// EncryptedValueHasSuffix applies the HasSuffix predicate on the "encrypted_value" field.
func EncryptedValueHasSuffix(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEncryptedValue), v))
	})
}

// EncryptedValueEqualFold applies the EqualFold predicate on the "encrypted_value" field.
func EncryptedValueEqualFold(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEncryptedValue), v))
	})
}

// EncryptedValueContainsFold applies the ContainsFold predicate on the "encrypted_value" field.
func EncryptedValueContainsFold(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEncryptedValue), v))
	})
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomain), v))
	})
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomain), v))
	})
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Fact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fact(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDomain), v...))
	})
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Fact {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Fact(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDomain), v...))
	})
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomain), v))
	})
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomain), v))
	})
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomain), v))
	})
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomain), v))
	})
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDomain), v))
	})
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDomain), v))
	})
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDomain), v))
	})
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDomain), v))
	})
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDomain), v))
	})
}

// HasScope applies the HasEdge predicate on the "scope" edge.
func HasScope() predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScopeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScopeTable, ScopeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScopeWith applies the HasEdge predicate on the "scope" edge with a given conditions (other predicates).
func HasScopeWith(preds ...predicate.Scope) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScopeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScopeTable, ScopeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFactType applies the HasEdge predicate on the "fact_type" edge.
func HasFactType() predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FactTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FactTypeTable, FactTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFactTypeWith applies the HasEdge predicate on the "fact_type" edge with a given conditions (other predicates).
func HasFactTypeWith(preds ...predicate.FactType) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FactTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FactTypeTable, FactTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Fact) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Fact) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Fact) predicate.Fact {
	return predicate.Fact(func(s *sql.Selector) {
		p(s.Not())
	})
}
