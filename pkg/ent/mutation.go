// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/open-privacy/opv/pkg/ent/apiaudit"
	"github.com/open-privacy/opv/pkg/ent/fact"
	"github.com/open-privacy/opv/pkg/ent/facttype"
	"github.com/open-privacy/opv/pkg/ent/grant"
	"github.com/open-privacy/opv/pkg/ent/predicate"
	"github.com/open-privacy/opv/pkg/ent/scope"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAPIAudit = "APIAudit"
	TypeFact     = "Fact"
	TypeFactType = "FactType"
	TypeGrant    = "Grant"
	TypeScope    = "Scope"
)

// APIAuditMutation represents an operation that mutates the APIAudit nodes in the graph.
type APIAuditMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	created_at          *time.Time
	updated_at          *time.Time
	deleted_at          *time.Time
	plane               *string
	hashed_grant_token  *string
	domain              *string
	http_path           *string
	http_method         *string
	sent_http_status    *int
	addsent_http_status *int
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*APIAudit, error)
	predicates          []predicate.APIAudit
}

var _ ent.Mutation = (*APIAuditMutation)(nil)

// apiauditOption allows management of the mutation configuration using functional options.
type apiauditOption func(*APIAuditMutation)

// newAPIAuditMutation creates new mutation for the APIAudit entity.
func newAPIAuditMutation(c config, op Op, opts ...apiauditOption) *APIAuditMutation {
	m := &APIAuditMutation{
		config:        c,
		op:            op,
		typ:           TypeAPIAudit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAPIAuditID sets the ID field of the mutation.
func withAPIAuditID(id string) apiauditOption {
	return func(m *APIAuditMutation) {
		var (
			err   error
			once  sync.Once
			value *APIAudit
		)
		m.oldValue = func(ctx context.Context) (*APIAudit, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().APIAudit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAPIAudit sets the old APIAudit of the mutation.
func withAPIAudit(node *APIAudit) apiauditOption {
	return func(m *APIAuditMutation) {
		m.oldValue = func(context.Context) (*APIAudit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m APIAuditMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m APIAuditMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of APIAudit entities.
func (m *APIAuditMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *APIAuditMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *APIAuditMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *APIAuditMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the APIAudit entity.
// If the APIAudit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuditMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *APIAuditMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *APIAuditMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *APIAuditMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the APIAudit entity.
// If the APIAudit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuditMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *APIAuditMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *APIAuditMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *APIAuditMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the APIAudit entity.
// If the APIAudit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuditMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *APIAuditMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[apiaudit.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *APIAuditMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[apiaudit.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *APIAuditMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, apiaudit.FieldDeletedAt)
}

// SetPlane sets the "plane" field.
func (m *APIAuditMutation) SetPlane(s string) {
	m.plane = &s
}

// Plane returns the value of the "plane" field in the mutation.
func (m *APIAuditMutation) Plane() (r string, exists bool) {
	v := m.plane
	if v == nil {
		return
	}
	return *v, true
}

// OldPlane returns the old "plane" field's value of the APIAudit entity.
// If the APIAudit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuditMutation) OldPlane(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPlane is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPlane requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlane: %w", err)
	}
	return oldValue.Plane, nil
}

// ResetPlane resets all changes to the "plane" field.
func (m *APIAuditMutation) ResetPlane() {
	m.plane = nil
}

// SetHashedGrantToken sets the "hashed_grant_token" field.
func (m *APIAuditMutation) SetHashedGrantToken(s string) {
	m.hashed_grant_token = &s
}

// HashedGrantToken returns the value of the "hashed_grant_token" field in the mutation.
func (m *APIAuditMutation) HashedGrantToken() (r string, exists bool) {
	v := m.hashed_grant_token
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedGrantToken returns the old "hashed_grant_token" field's value of the APIAudit entity.
// If the APIAudit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuditMutation) OldHashedGrantToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHashedGrantToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHashedGrantToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedGrantToken: %w", err)
	}
	return oldValue.HashedGrantToken, nil
}

// ClearHashedGrantToken clears the value of the "hashed_grant_token" field.
func (m *APIAuditMutation) ClearHashedGrantToken() {
	m.hashed_grant_token = nil
	m.clearedFields[apiaudit.FieldHashedGrantToken] = struct{}{}
}

// HashedGrantTokenCleared returns if the "hashed_grant_token" field was cleared in this mutation.
func (m *APIAuditMutation) HashedGrantTokenCleared() bool {
	_, ok := m.clearedFields[apiaudit.FieldHashedGrantToken]
	return ok
}

// ResetHashedGrantToken resets all changes to the "hashed_grant_token" field.
func (m *APIAuditMutation) ResetHashedGrantToken() {
	m.hashed_grant_token = nil
	delete(m.clearedFields, apiaudit.FieldHashedGrantToken)
}

// SetDomain sets the "domain" field.
func (m *APIAuditMutation) SetDomain(s string) {
	m.domain = &s
}

// Domain returns the value of the "domain" field in the mutation.
func (m *APIAuditMutation) Domain() (r string, exists bool) {
	v := m.domain
	if v == nil {
		return
	}
	return *v, true
}

// OldDomain returns the old "domain" field's value of the APIAudit entity.
// If the APIAudit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuditMutation) OldDomain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDomain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDomain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomain: %w", err)
	}
	return oldValue.Domain, nil
}

// ClearDomain clears the value of the "domain" field.
func (m *APIAuditMutation) ClearDomain() {
	m.domain = nil
	m.clearedFields[apiaudit.FieldDomain] = struct{}{}
}

// DomainCleared returns if the "domain" field was cleared in this mutation.
func (m *APIAuditMutation) DomainCleared() bool {
	_, ok := m.clearedFields[apiaudit.FieldDomain]
	return ok
}

// ResetDomain resets all changes to the "domain" field.
func (m *APIAuditMutation) ResetDomain() {
	m.domain = nil
	delete(m.clearedFields, apiaudit.FieldDomain)
}

// SetHTTPPath sets the "http_path" field.
func (m *APIAuditMutation) SetHTTPPath(s string) {
	m.http_path = &s
}

// HTTPPath returns the value of the "http_path" field in the mutation.
func (m *APIAuditMutation) HTTPPath() (r string, exists bool) {
	v := m.http_path
	if v == nil {
		return
	}
	return *v, true
}

// OldHTTPPath returns the old "http_path" field's value of the APIAudit entity.
// If the APIAudit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuditMutation) OldHTTPPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHTTPPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHTTPPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTTPPath: %w", err)
	}
	return oldValue.HTTPPath, nil
}

// ClearHTTPPath clears the value of the "http_path" field.
func (m *APIAuditMutation) ClearHTTPPath() {
	m.http_path = nil
	m.clearedFields[apiaudit.FieldHTTPPath] = struct{}{}
}

// HTTPPathCleared returns if the "http_path" field was cleared in this mutation.
func (m *APIAuditMutation) HTTPPathCleared() bool {
	_, ok := m.clearedFields[apiaudit.FieldHTTPPath]
	return ok
}

// ResetHTTPPath resets all changes to the "http_path" field.
func (m *APIAuditMutation) ResetHTTPPath() {
	m.http_path = nil
	delete(m.clearedFields, apiaudit.FieldHTTPPath)
}

// SetHTTPMethod sets the "http_method" field.
func (m *APIAuditMutation) SetHTTPMethod(s string) {
	m.http_method = &s
}

// HTTPMethod returns the value of the "http_method" field in the mutation.
func (m *APIAuditMutation) HTTPMethod() (r string, exists bool) {
	v := m.http_method
	if v == nil {
		return
	}
	return *v, true
}

// OldHTTPMethod returns the old "http_method" field's value of the APIAudit entity.
// If the APIAudit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuditMutation) OldHTTPMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHTTPMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHTTPMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTTPMethod: %w", err)
	}
	return oldValue.HTTPMethod, nil
}

// ClearHTTPMethod clears the value of the "http_method" field.
func (m *APIAuditMutation) ClearHTTPMethod() {
	m.http_method = nil
	m.clearedFields[apiaudit.FieldHTTPMethod] = struct{}{}
}

// HTTPMethodCleared returns if the "http_method" field was cleared in this mutation.
func (m *APIAuditMutation) HTTPMethodCleared() bool {
	_, ok := m.clearedFields[apiaudit.FieldHTTPMethod]
	return ok
}

// ResetHTTPMethod resets all changes to the "http_method" field.
func (m *APIAuditMutation) ResetHTTPMethod() {
	m.http_method = nil
	delete(m.clearedFields, apiaudit.FieldHTTPMethod)
}

// SetSentHTTPStatus sets the "sent_http_status" field.
func (m *APIAuditMutation) SetSentHTTPStatus(i int) {
	m.sent_http_status = &i
	m.addsent_http_status = nil
}

// SentHTTPStatus returns the value of the "sent_http_status" field in the mutation.
func (m *APIAuditMutation) SentHTTPStatus() (r int, exists bool) {
	v := m.sent_http_status
	if v == nil {
		return
	}
	return *v, true
}

// OldSentHTTPStatus returns the old "sent_http_status" field's value of the APIAudit entity.
// If the APIAudit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *APIAuditMutation) OldSentHTTPStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSentHTTPStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSentHTTPStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentHTTPStatus: %w", err)
	}
	return oldValue.SentHTTPStatus, nil
}

// AddSentHTTPStatus adds i to the "sent_http_status" field.
func (m *APIAuditMutation) AddSentHTTPStatus(i int) {
	if m.addsent_http_status != nil {
		*m.addsent_http_status += i
	} else {
		m.addsent_http_status = &i
	}
}

// AddedSentHTTPStatus returns the value that was added to the "sent_http_status" field in this mutation.
func (m *APIAuditMutation) AddedSentHTTPStatus() (r int, exists bool) {
	v := m.addsent_http_status
	if v == nil {
		return
	}
	return *v, true
}

// ClearSentHTTPStatus clears the value of the "sent_http_status" field.
func (m *APIAuditMutation) ClearSentHTTPStatus() {
	m.sent_http_status = nil
	m.addsent_http_status = nil
	m.clearedFields[apiaudit.FieldSentHTTPStatus] = struct{}{}
}

// SentHTTPStatusCleared returns if the "sent_http_status" field was cleared in this mutation.
func (m *APIAuditMutation) SentHTTPStatusCleared() bool {
	_, ok := m.clearedFields[apiaudit.FieldSentHTTPStatus]
	return ok
}

// ResetSentHTTPStatus resets all changes to the "sent_http_status" field.
func (m *APIAuditMutation) ResetSentHTTPStatus() {
	m.sent_http_status = nil
	m.addsent_http_status = nil
	delete(m.clearedFields, apiaudit.FieldSentHTTPStatus)
}

// Op returns the operation name.
func (m *APIAuditMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (APIAudit).
func (m *APIAuditMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *APIAuditMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, apiaudit.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, apiaudit.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, apiaudit.FieldDeletedAt)
	}
	if m.plane != nil {
		fields = append(fields, apiaudit.FieldPlane)
	}
	if m.hashed_grant_token != nil {
		fields = append(fields, apiaudit.FieldHashedGrantToken)
	}
	if m.domain != nil {
		fields = append(fields, apiaudit.FieldDomain)
	}
	if m.http_path != nil {
		fields = append(fields, apiaudit.FieldHTTPPath)
	}
	if m.http_method != nil {
		fields = append(fields, apiaudit.FieldHTTPMethod)
	}
	if m.sent_http_status != nil {
		fields = append(fields, apiaudit.FieldSentHTTPStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *APIAuditMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apiaudit.FieldCreatedAt:
		return m.CreatedAt()
	case apiaudit.FieldUpdatedAt:
		return m.UpdatedAt()
	case apiaudit.FieldDeletedAt:
		return m.DeletedAt()
	case apiaudit.FieldPlane:
		return m.Plane()
	case apiaudit.FieldHashedGrantToken:
		return m.HashedGrantToken()
	case apiaudit.FieldDomain:
		return m.Domain()
	case apiaudit.FieldHTTPPath:
		return m.HTTPPath()
	case apiaudit.FieldHTTPMethod:
		return m.HTTPMethod()
	case apiaudit.FieldSentHTTPStatus:
		return m.SentHTTPStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *APIAuditMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apiaudit.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case apiaudit.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case apiaudit.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case apiaudit.FieldPlane:
		return m.OldPlane(ctx)
	case apiaudit.FieldHashedGrantToken:
		return m.OldHashedGrantToken(ctx)
	case apiaudit.FieldDomain:
		return m.OldDomain(ctx)
	case apiaudit.FieldHTTPPath:
		return m.OldHTTPPath(ctx)
	case apiaudit.FieldHTTPMethod:
		return m.OldHTTPMethod(ctx)
	case apiaudit.FieldSentHTTPStatus:
		return m.OldSentHTTPStatus(ctx)
	}
	return nil, fmt.Errorf("unknown APIAudit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *APIAuditMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apiaudit.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case apiaudit.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case apiaudit.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case apiaudit.FieldPlane:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlane(v)
		return nil
	case apiaudit.FieldHashedGrantToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedGrantToken(v)
		return nil
	case apiaudit.FieldDomain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomain(v)
		return nil
	case apiaudit.FieldHTTPPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTTPPath(v)
		return nil
	case apiaudit.FieldHTTPMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTTPMethod(v)
		return nil
	case apiaudit.FieldSentHTTPStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentHTTPStatus(v)
		return nil
	}
	return fmt.Errorf("unknown APIAudit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *APIAuditMutation) AddedFields() []string {
	var fields []string
	if m.addsent_http_status != nil {
		fields = append(fields, apiaudit.FieldSentHTTPStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *APIAuditMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case apiaudit.FieldSentHTTPStatus:
		return m.AddedSentHTTPStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *APIAuditMutation) AddField(name string, value ent.Value) error {
	switch name {
	case apiaudit.FieldSentHTTPStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSentHTTPStatus(v)
		return nil
	}
	return fmt.Errorf("unknown APIAudit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *APIAuditMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(apiaudit.FieldDeletedAt) {
		fields = append(fields, apiaudit.FieldDeletedAt)
	}
	if m.FieldCleared(apiaudit.FieldHashedGrantToken) {
		fields = append(fields, apiaudit.FieldHashedGrantToken)
	}
	if m.FieldCleared(apiaudit.FieldDomain) {
		fields = append(fields, apiaudit.FieldDomain)
	}
	if m.FieldCleared(apiaudit.FieldHTTPPath) {
		fields = append(fields, apiaudit.FieldHTTPPath)
	}
	if m.FieldCleared(apiaudit.FieldHTTPMethod) {
		fields = append(fields, apiaudit.FieldHTTPMethod)
	}
	if m.FieldCleared(apiaudit.FieldSentHTTPStatus) {
		fields = append(fields, apiaudit.FieldSentHTTPStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *APIAuditMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *APIAuditMutation) ClearField(name string) error {
	switch name {
	case apiaudit.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case apiaudit.FieldHashedGrantToken:
		m.ClearHashedGrantToken()
		return nil
	case apiaudit.FieldDomain:
		m.ClearDomain()
		return nil
	case apiaudit.FieldHTTPPath:
		m.ClearHTTPPath()
		return nil
	case apiaudit.FieldHTTPMethod:
		m.ClearHTTPMethod()
		return nil
	case apiaudit.FieldSentHTTPStatus:
		m.ClearSentHTTPStatus()
		return nil
	}
	return fmt.Errorf("unknown APIAudit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *APIAuditMutation) ResetField(name string) error {
	switch name {
	case apiaudit.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case apiaudit.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case apiaudit.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case apiaudit.FieldPlane:
		m.ResetPlane()
		return nil
	case apiaudit.FieldHashedGrantToken:
		m.ResetHashedGrantToken()
		return nil
	case apiaudit.FieldDomain:
		m.ResetDomain()
		return nil
	case apiaudit.FieldHTTPPath:
		m.ResetHTTPPath()
		return nil
	case apiaudit.FieldHTTPMethod:
		m.ResetHTTPMethod()
		return nil
	case apiaudit.FieldSentHTTPStatus:
		m.ResetSentHTTPStatus()
		return nil
	}
	return fmt.Errorf("unknown APIAudit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *APIAuditMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *APIAuditMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *APIAuditMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *APIAuditMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *APIAuditMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *APIAuditMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *APIAuditMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown APIAudit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *APIAuditMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown APIAudit edge %s", name)
}

// FactMutation represents an operation that mutates the Fact nodes in the graph.
type FactMutation struct {
	config
	op               Op
	typ              string
	id               *string
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	hashed_value     *string
	encrypted_value  *string
	domain           *string
	clearedFields    map[string]struct{}
	scope            *string
	clearedscope     bool
	fact_type        *string
	clearedfact_type bool
	done             bool
	oldValue         func(context.Context) (*Fact, error)
	predicates       []predicate.Fact
}

var _ ent.Mutation = (*FactMutation)(nil)

// factOption allows management of the mutation configuration using functional options.
type factOption func(*FactMutation)

// newFactMutation creates new mutation for the Fact entity.
func newFactMutation(c config, op Op, opts ...factOption) *FactMutation {
	m := &FactMutation{
		config:        c,
		op:            op,
		typ:           TypeFact,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFactID sets the ID field of the mutation.
func withFactID(id string) factOption {
	return func(m *FactMutation) {
		var (
			err   error
			once  sync.Once
			value *Fact
		)
		m.oldValue = func(ctx context.Context) (*Fact, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Fact.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFact sets the old Fact of the mutation.
func withFact(node *Fact) factOption {
	return func(m *FactMutation) {
		m.oldValue = func(context.Context) (*Fact, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FactMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FactMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Fact entities.
func (m *FactMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *FactMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *FactMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FactMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Fact entity.
// If the Fact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FactMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FactMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FactMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Fact entity.
// If the Fact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FactMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FactMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FactMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Fact entity.
// If the Fact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *FactMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[fact.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *FactMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[fact.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FactMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, fact.FieldDeletedAt)
}

// SetHashedValue sets the "hashed_value" field.
func (m *FactMutation) SetHashedValue(s string) {
	m.hashed_value = &s
}

// HashedValue returns the value of the "hashed_value" field in the mutation.
func (m *FactMutation) HashedValue() (r string, exists bool) {
	v := m.hashed_value
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedValue returns the old "hashed_value" field's value of the Fact entity.
// If the Fact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactMutation) OldHashedValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHashedValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHashedValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedValue: %w", err)
	}
	return oldValue.HashedValue, nil
}

// ResetHashedValue resets all changes to the "hashed_value" field.
func (m *FactMutation) ResetHashedValue() {
	m.hashed_value = nil
}

// SetEncryptedValue sets the "encrypted_value" field.
func (m *FactMutation) SetEncryptedValue(s string) {
	m.encrypted_value = &s
}

// EncryptedValue returns the value of the "encrypted_value" field in the mutation.
func (m *FactMutation) EncryptedValue() (r string, exists bool) {
	v := m.encrypted_value
	if v == nil {
		return
	}
	return *v, true
}

// OldEncryptedValue returns the old "encrypted_value" field's value of the Fact entity.
// If the Fact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactMutation) OldEncryptedValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEncryptedValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEncryptedValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEncryptedValue: %w", err)
	}
	return oldValue.EncryptedValue, nil
}

// ResetEncryptedValue resets all changes to the "encrypted_value" field.
func (m *FactMutation) ResetEncryptedValue() {
	m.encrypted_value = nil
}

// SetDomain sets the "domain" field.
func (m *FactMutation) SetDomain(s string) {
	m.domain = &s
}

// Domain returns the value of the "domain" field in the mutation.
func (m *FactMutation) Domain() (r string, exists bool) {
	v := m.domain
	if v == nil {
		return
	}
	return *v, true
}

// OldDomain returns the old "domain" field's value of the Fact entity.
// If the Fact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactMutation) OldDomain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDomain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDomain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomain: %w", err)
	}
	return oldValue.Domain, nil
}

// ResetDomain resets all changes to the "domain" field.
func (m *FactMutation) ResetDomain() {
	m.domain = nil
}

// SetScopeID sets the "scope" edge to the Scope entity by id.
func (m *FactMutation) SetScopeID(id string) {
	m.scope = &id
}

// ClearScope clears the "scope" edge to the Scope entity.
func (m *FactMutation) ClearScope() {
	m.clearedscope = true
}

// ScopeCleared returns if the "scope" edge to the Scope entity was cleared.
func (m *FactMutation) ScopeCleared() bool {
	return m.clearedscope
}

// ScopeID returns the "scope" edge ID in the mutation.
func (m *FactMutation) ScopeID() (id string, exists bool) {
	if m.scope != nil {
		return *m.scope, true
	}
	return
}

// ScopeIDs returns the "scope" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ScopeID instead. It exists only for internal usage by the builders.
func (m *FactMutation) ScopeIDs() (ids []string) {
	if id := m.scope; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetScope resets all changes to the "scope" edge.
func (m *FactMutation) ResetScope() {
	m.scope = nil
	m.clearedscope = false
}

// SetFactTypeID sets the "fact_type" edge to the FactType entity by id.
func (m *FactMutation) SetFactTypeID(id string) {
	m.fact_type = &id
}

// ClearFactType clears the "fact_type" edge to the FactType entity.
func (m *FactMutation) ClearFactType() {
	m.clearedfact_type = true
}

// FactTypeCleared returns if the "fact_type" edge to the FactType entity was cleared.
func (m *FactMutation) FactTypeCleared() bool {
	return m.clearedfact_type
}

// FactTypeID returns the "fact_type" edge ID in the mutation.
func (m *FactMutation) FactTypeID() (id string, exists bool) {
	if m.fact_type != nil {
		return *m.fact_type, true
	}
	return
}

// FactTypeIDs returns the "fact_type" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FactTypeID instead. It exists only for internal usage by the builders.
func (m *FactMutation) FactTypeIDs() (ids []string) {
	if id := m.fact_type; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFactType resets all changes to the "fact_type" edge.
func (m *FactMutation) ResetFactType() {
	m.fact_type = nil
	m.clearedfact_type = false
}

// Op returns the operation name.
func (m *FactMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Fact).
func (m *FactMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FactMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, fact.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, fact.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, fact.FieldDeletedAt)
	}
	if m.hashed_value != nil {
		fields = append(fields, fact.FieldHashedValue)
	}
	if m.encrypted_value != nil {
		fields = append(fields, fact.FieldEncryptedValue)
	}
	if m.domain != nil {
		fields = append(fields, fact.FieldDomain)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FactMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fact.FieldCreatedAt:
		return m.CreatedAt()
	case fact.FieldUpdatedAt:
		return m.UpdatedAt()
	case fact.FieldDeletedAt:
		return m.DeletedAt()
	case fact.FieldHashedValue:
		return m.HashedValue()
	case fact.FieldEncryptedValue:
		return m.EncryptedValue()
	case fact.FieldDomain:
		return m.Domain()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FactMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fact.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case fact.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case fact.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case fact.FieldHashedValue:
		return m.OldHashedValue(ctx)
	case fact.FieldEncryptedValue:
		return m.OldEncryptedValue(ctx)
	case fact.FieldDomain:
		return m.OldDomain(ctx)
	}
	return nil, fmt.Errorf("unknown Fact field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FactMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fact.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case fact.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case fact.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case fact.FieldHashedValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedValue(v)
		return nil
	case fact.FieldEncryptedValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEncryptedValue(v)
		return nil
	case fact.FieldDomain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomain(v)
		return nil
	}
	return fmt.Errorf("unknown Fact field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FactMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FactMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FactMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Fact numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FactMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(fact.FieldDeletedAt) {
		fields = append(fields, fact.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FactMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FactMutation) ClearField(name string) error {
	switch name {
	case fact.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Fact nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FactMutation) ResetField(name string) error {
	switch name {
	case fact.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case fact.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case fact.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case fact.FieldHashedValue:
		m.ResetHashedValue()
		return nil
	case fact.FieldEncryptedValue:
		m.ResetEncryptedValue()
		return nil
	case fact.FieldDomain:
		m.ResetDomain()
		return nil
	}
	return fmt.Errorf("unknown Fact field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FactMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.scope != nil {
		edges = append(edges, fact.EdgeScope)
	}
	if m.fact_type != nil {
		edges = append(edges, fact.EdgeFactType)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FactMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case fact.EdgeScope:
		if id := m.scope; id != nil {
			return []ent.Value{*id}
		}
	case fact.EdgeFactType:
		if id := m.fact_type; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FactMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FactMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FactMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedscope {
		edges = append(edges, fact.EdgeScope)
	}
	if m.clearedfact_type {
		edges = append(edges, fact.EdgeFactType)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FactMutation) EdgeCleared(name string) bool {
	switch name {
	case fact.EdgeScope:
		return m.clearedscope
	case fact.EdgeFactType:
		return m.clearedfact_type
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FactMutation) ClearEdge(name string) error {
	switch name {
	case fact.EdgeScope:
		m.ClearScope()
		return nil
	case fact.EdgeFactType:
		m.ClearFactType()
		return nil
	}
	return fmt.Errorf("unknown Fact unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FactMutation) ResetEdge(name string) error {
	switch name {
	case fact.EdgeScope:
		m.ResetScope()
		return nil
	case fact.EdgeFactType:
		m.ResetFactType()
		return nil
	}
	return fmt.Errorf("unknown Fact edge %s", name)
}

// FactTypeMutation represents an operation that mutates the FactType nodes in the graph.
type FactTypeMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	slug          *string
	built_in      *bool
	validation    *string
	clearedFields map[string]struct{}
	facts         map[string]struct{}
	removedfacts  map[string]struct{}
	clearedfacts  bool
	done          bool
	oldValue      func(context.Context) (*FactType, error)
	predicates    []predicate.FactType
}

var _ ent.Mutation = (*FactTypeMutation)(nil)

// facttypeOption allows management of the mutation configuration using functional options.
type facttypeOption func(*FactTypeMutation)

// newFactTypeMutation creates new mutation for the FactType entity.
func newFactTypeMutation(c config, op Op, opts ...facttypeOption) *FactTypeMutation {
	m := &FactTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeFactType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFactTypeID sets the ID field of the mutation.
func withFactTypeID(id string) facttypeOption {
	return func(m *FactTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *FactType
		)
		m.oldValue = func(ctx context.Context) (*FactType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FactType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFactType sets the old FactType of the mutation.
func withFactType(node *FactType) facttypeOption {
	return func(m *FactTypeMutation) {
		m.oldValue = func(context.Context) (*FactType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FactTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FactTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FactType entities.
func (m *FactTypeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *FactTypeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *FactTypeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FactTypeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FactType entity.
// If the FactType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactTypeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FactTypeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FactTypeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FactTypeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FactType entity.
// If the FactType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactTypeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FactTypeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FactTypeMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FactTypeMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the FactType entity.
// If the FactType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactTypeMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *FactTypeMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[facttype.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *FactTypeMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[facttype.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FactTypeMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, facttype.FieldDeletedAt)
}

// SetSlug sets the "slug" field.
func (m *FactTypeMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *FactTypeMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the FactType entity.
// If the FactType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactTypeMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *FactTypeMutation) ResetSlug() {
	m.slug = nil
}

// SetBuiltIn sets the "built_in" field.
func (m *FactTypeMutation) SetBuiltIn(b bool) {
	m.built_in = &b
}

// BuiltIn returns the value of the "built_in" field in the mutation.
func (m *FactTypeMutation) BuiltIn() (r bool, exists bool) {
	v := m.built_in
	if v == nil {
		return
	}
	return *v, true
}

// OldBuiltIn returns the old "built_in" field's value of the FactType entity.
// If the FactType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactTypeMutation) OldBuiltIn(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBuiltIn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBuiltIn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuiltIn: %w", err)
	}
	return oldValue.BuiltIn, nil
}

// ResetBuiltIn resets all changes to the "built_in" field.
func (m *FactTypeMutation) ResetBuiltIn() {
	m.built_in = nil
}

// SetValidation sets the "validation" field.
func (m *FactTypeMutation) SetValidation(s string) {
	m.validation = &s
}

// Validation returns the value of the "validation" field in the mutation.
func (m *FactTypeMutation) Validation() (r string, exists bool) {
	v := m.validation
	if v == nil {
		return
	}
	return *v, true
}

// OldValidation returns the old "validation" field's value of the FactType entity.
// If the FactType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactTypeMutation) OldValidation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValidation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValidation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidation: %w", err)
	}
	return oldValue.Validation, nil
}

// ClearValidation clears the value of the "validation" field.
func (m *FactTypeMutation) ClearValidation() {
	m.validation = nil
	m.clearedFields[facttype.FieldValidation] = struct{}{}
}

// ValidationCleared returns if the "validation" field was cleared in this mutation.
func (m *FactTypeMutation) ValidationCleared() bool {
	_, ok := m.clearedFields[facttype.FieldValidation]
	return ok
}

// ResetValidation resets all changes to the "validation" field.
func (m *FactTypeMutation) ResetValidation() {
	m.validation = nil
	delete(m.clearedFields, facttype.FieldValidation)
}

// AddFactIDs adds the "facts" edge to the Fact entity by ids.
func (m *FactTypeMutation) AddFactIDs(ids ...string) {
	if m.facts == nil {
		m.facts = make(map[string]struct{})
	}
	for i := range ids {
		m.facts[ids[i]] = struct{}{}
	}
}

// ClearFacts clears the "facts" edge to the Fact entity.
func (m *FactTypeMutation) ClearFacts() {
	m.clearedfacts = true
}

// FactsCleared returns if the "facts" edge to the Fact entity was cleared.
func (m *FactTypeMutation) FactsCleared() bool {
	return m.clearedfacts
}

// RemoveFactIDs removes the "facts" edge to the Fact entity by IDs.
func (m *FactTypeMutation) RemoveFactIDs(ids ...string) {
	if m.removedfacts == nil {
		m.removedfacts = make(map[string]struct{})
	}
	for i := range ids {
		m.removedfacts[ids[i]] = struct{}{}
	}
}

// RemovedFacts returns the removed IDs of the "facts" edge to the Fact entity.
func (m *FactTypeMutation) RemovedFactsIDs() (ids []string) {
	for id := range m.removedfacts {
		ids = append(ids, id)
	}
	return
}

// FactsIDs returns the "facts" edge IDs in the mutation.
func (m *FactTypeMutation) FactsIDs() (ids []string) {
	for id := range m.facts {
		ids = append(ids, id)
	}
	return
}

// ResetFacts resets all changes to the "facts" edge.
func (m *FactTypeMutation) ResetFacts() {
	m.facts = nil
	m.clearedfacts = false
	m.removedfacts = nil
}

// Op returns the operation name.
func (m *FactTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FactType).
func (m *FactTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FactTypeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, facttype.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, facttype.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, facttype.FieldDeletedAt)
	}
	if m.slug != nil {
		fields = append(fields, facttype.FieldSlug)
	}
	if m.built_in != nil {
		fields = append(fields, facttype.FieldBuiltIn)
	}
	if m.validation != nil {
		fields = append(fields, facttype.FieldValidation)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FactTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case facttype.FieldCreatedAt:
		return m.CreatedAt()
	case facttype.FieldUpdatedAt:
		return m.UpdatedAt()
	case facttype.FieldDeletedAt:
		return m.DeletedAt()
	case facttype.FieldSlug:
		return m.Slug()
	case facttype.FieldBuiltIn:
		return m.BuiltIn()
	case facttype.FieldValidation:
		return m.Validation()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FactTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case facttype.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case facttype.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case facttype.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case facttype.FieldSlug:
		return m.OldSlug(ctx)
	case facttype.FieldBuiltIn:
		return m.OldBuiltIn(ctx)
	case facttype.FieldValidation:
		return m.OldValidation(ctx)
	}
	return nil, fmt.Errorf("unknown FactType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FactTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case facttype.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case facttype.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case facttype.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case facttype.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case facttype.FieldBuiltIn:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuiltIn(v)
		return nil
	case facttype.FieldValidation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidation(v)
		return nil
	}
	return fmt.Errorf("unknown FactType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FactTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FactTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FactTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FactType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FactTypeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(facttype.FieldDeletedAt) {
		fields = append(fields, facttype.FieldDeletedAt)
	}
	if m.FieldCleared(facttype.FieldValidation) {
		fields = append(fields, facttype.FieldValidation)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FactTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FactTypeMutation) ClearField(name string) error {
	switch name {
	case facttype.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case facttype.FieldValidation:
		m.ClearValidation()
		return nil
	}
	return fmt.Errorf("unknown FactType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FactTypeMutation) ResetField(name string) error {
	switch name {
	case facttype.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case facttype.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case facttype.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case facttype.FieldSlug:
		m.ResetSlug()
		return nil
	case facttype.FieldBuiltIn:
		m.ResetBuiltIn()
		return nil
	case facttype.FieldValidation:
		m.ResetValidation()
		return nil
	}
	return fmt.Errorf("unknown FactType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FactTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.facts != nil {
		edges = append(edges, facttype.EdgeFacts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FactTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case facttype.EdgeFacts:
		ids := make([]ent.Value, 0, len(m.facts))
		for id := range m.facts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FactTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfacts != nil {
		edges = append(edges, facttype.EdgeFacts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FactTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case facttype.EdgeFacts:
		ids := make([]ent.Value, 0, len(m.removedfacts))
		for id := range m.removedfacts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FactTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfacts {
		edges = append(edges, facttype.EdgeFacts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FactTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case facttype.EdgeFacts:
		return m.clearedfacts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FactTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown FactType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FactTypeMutation) ResetEdge(name string) error {
	switch name {
	case facttype.EdgeFacts:
		m.ResetFacts()
		return nil
	}
	return fmt.Errorf("unknown FactType edge %s", name)
}

// GrantMutation represents an operation that mutates the Grant nodes in the graph.
type GrantMutation struct {
	config
	op                   Op
	typ                  string
	id                   *string
	created_at           *time.Time
	updated_at           *time.Time
	deleted_at           *time.Time
	hashed_grant_token   *string
	domain               *string
	version              *string
	allowed_http_methods *string
	paths                *[]string
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*Grant, error)
	predicates           []predicate.Grant
}

var _ ent.Mutation = (*GrantMutation)(nil)

// grantOption allows management of the mutation configuration using functional options.
type grantOption func(*GrantMutation)

// newGrantMutation creates new mutation for the Grant entity.
func newGrantMutation(c config, op Op, opts ...grantOption) *GrantMutation {
	m := &GrantMutation{
		config:        c,
		op:            op,
		typ:           TypeGrant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGrantID sets the ID field of the mutation.
func withGrantID(id string) grantOption {
	return func(m *GrantMutation) {
		var (
			err   error
			once  sync.Once
			value *Grant
		)
		m.oldValue = func(ctx context.Context) (*Grant, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Grant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGrant sets the old Grant of the mutation.
func withGrant(node *Grant) grantOption {
	return func(m *GrantMutation) {
		m.oldValue = func(context.Context) (*Grant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GrantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GrantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Grant entities.
func (m *GrantMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *GrantMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *GrantMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GrantMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GrantMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GrantMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GrantMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GrantMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GrantMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GrantMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *GrantMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[grant.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *GrantMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[grant.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GrantMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, grant.FieldDeletedAt)
}

// SetHashedGrantToken sets the "hashed_grant_token" field.
func (m *GrantMutation) SetHashedGrantToken(s string) {
	m.hashed_grant_token = &s
}

// HashedGrantToken returns the value of the "hashed_grant_token" field in the mutation.
func (m *GrantMutation) HashedGrantToken() (r string, exists bool) {
	v := m.hashed_grant_token
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedGrantToken returns the old "hashed_grant_token" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldHashedGrantToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHashedGrantToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHashedGrantToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedGrantToken: %w", err)
	}
	return oldValue.HashedGrantToken, nil
}

// ResetHashedGrantToken resets all changes to the "hashed_grant_token" field.
func (m *GrantMutation) ResetHashedGrantToken() {
	m.hashed_grant_token = nil
}

// SetDomain sets the "domain" field.
func (m *GrantMutation) SetDomain(s string) {
	m.domain = &s
}

// Domain returns the value of the "domain" field in the mutation.
func (m *GrantMutation) Domain() (r string, exists bool) {
	v := m.domain
	if v == nil {
		return
	}
	return *v, true
}

// OldDomain returns the old "domain" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldDomain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDomain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDomain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomain: %w", err)
	}
	return oldValue.Domain, nil
}

// ResetDomain resets all changes to the "domain" field.
func (m *GrantMutation) ResetDomain() {
	m.domain = nil
}

// SetVersion sets the "version" field.
func (m *GrantMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *GrantMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *GrantMutation) ResetVersion() {
	m.version = nil
}

// SetAllowedHTTPMethods sets the "allowed_http_methods" field.
func (m *GrantMutation) SetAllowedHTTPMethods(s string) {
	m.allowed_http_methods = &s
}

// AllowedHTTPMethods returns the value of the "allowed_http_methods" field in the mutation.
func (m *GrantMutation) AllowedHTTPMethods() (r string, exists bool) {
	v := m.allowed_http_methods
	if v == nil {
		return
	}
	return *v, true
}

// OldAllowedHTTPMethods returns the old "allowed_http_methods" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldAllowedHTTPMethods(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAllowedHTTPMethods is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAllowedHTTPMethods requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllowedHTTPMethods: %w", err)
	}
	return oldValue.AllowedHTTPMethods, nil
}

// ResetAllowedHTTPMethods resets all changes to the "allowed_http_methods" field.
func (m *GrantMutation) ResetAllowedHTTPMethods() {
	m.allowed_http_methods = nil
}

// SetPaths sets the "paths" field.
func (m *GrantMutation) SetPaths(s []string) {
	m.paths = &s
}

// Paths returns the value of the "paths" field in the mutation.
func (m *GrantMutation) Paths() (r []string, exists bool) {
	v := m.paths
	if v == nil {
		return
	}
	return *v, true
}

// OldPaths returns the old "paths" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldPaths(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPaths is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPaths requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaths: %w", err)
	}
	return oldValue.Paths, nil
}

// ResetPaths resets all changes to the "paths" field.
func (m *GrantMutation) ResetPaths() {
	m.paths = nil
}

// Op returns the operation name.
func (m *GrantMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Grant).
func (m *GrantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GrantMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, grant.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, grant.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, grant.FieldDeletedAt)
	}
	if m.hashed_grant_token != nil {
		fields = append(fields, grant.FieldHashedGrantToken)
	}
	if m.domain != nil {
		fields = append(fields, grant.FieldDomain)
	}
	if m.version != nil {
		fields = append(fields, grant.FieldVersion)
	}
	if m.allowed_http_methods != nil {
		fields = append(fields, grant.FieldAllowedHTTPMethods)
	}
	if m.paths != nil {
		fields = append(fields, grant.FieldPaths)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GrantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case grant.FieldCreatedAt:
		return m.CreatedAt()
	case grant.FieldUpdatedAt:
		return m.UpdatedAt()
	case grant.FieldDeletedAt:
		return m.DeletedAt()
	case grant.FieldHashedGrantToken:
		return m.HashedGrantToken()
	case grant.FieldDomain:
		return m.Domain()
	case grant.FieldVersion:
		return m.Version()
	case grant.FieldAllowedHTTPMethods:
		return m.AllowedHTTPMethods()
	case grant.FieldPaths:
		return m.Paths()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GrantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case grant.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case grant.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case grant.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case grant.FieldHashedGrantToken:
		return m.OldHashedGrantToken(ctx)
	case grant.FieldDomain:
		return m.OldDomain(ctx)
	case grant.FieldVersion:
		return m.OldVersion(ctx)
	case grant.FieldAllowedHTTPMethods:
		return m.OldAllowedHTTPMethods(ctx)
	case grant.FieldPaths:
		return m.OldPaths(ctx)
	}
	return nil, fmt.Errorf("unknown Grant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GrantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case grant.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case grant.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case grant.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case grant.FieldHashedGrantToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedGrantToken(v)
		return nil
	case grant.FieldDomain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomain(v)
		return nil
	case grant.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case grant.FieldAllowedHTTPMethods:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllowedHTTPMethods(v)
		return nil
	case grant.FieldPaths:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaths(v)
		return nil
	}
	return fmt.Errorf("unknown Grant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GrantMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GrantMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GrantMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Grant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GrantMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(grant.FieldDeletedAt) {
		fields = append(fields, grant.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GrantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GrantMutation) ClearField(name string) error {
	switch name {
	case grant.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Grant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GrantMutation) ResetField(name string) error {
	switch name {
	case grant.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case grant.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case grant.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case grant.FieldHashedGrantToken:
		m.ResetHashedGrantToken()
		return nil
	case grant.FieldDomain:
		m.ResetDomain()
		return nil
	case grant.FieldVersion:
		m.ResetVersion()
		return nil
	case grant.FieldAllowedHTTPMethods:
		m.ResetAllowedHTTPMethods()
		return nil
	case grant.FieldPaths:
		m.ResetPaths()
		return nil
	}
	return fmt.Errorf("unknown Grant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GrantMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GrantMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GrantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GrantMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GrantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GrantMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GrantMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Grant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GrantMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Grant edge %s", name)
}

// ScopeMutation represents an operation that mutates the Scope nodes in the graph.
type ScopeMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	custom_id     *string
	nonce         *string
	domain        *string
	clearedFields map[string]struct{}
	facts         map[string]struct{}
	removedfacts  map[string]struct{}
	clearedfacts  bool
	done          bool
	oldValue      func(context.Context) (*Scope, error)
	predicates    []predicate.Scope
}

var _ ent.Mutation = (*ScopeMutation)(nil)

// scopeOption allows management of the mutation configuration using functional options.
type scopeOption func(*ScopeMutation)

// newScopeMutation creates new mutation for the Scope entity.
func newScopeMutation(c config, op Op, opts ...scopeOption) *ScopeMutation {
	m := &ScopeMutation{
		config:        c,
		op:            op,
		typ:           TypeScope,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScopeID sets the ID field of the mutation.
func withScopeID(id string) scopeOption {
	return func(m *ScopeMutation) {
		var (
			err   error
			once  sync.Once
			value *Scope
		)
		m.oldValue = func(ctx context.Context) (*Scope, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Scope.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScope sets the old Scope of the mutation.
func withScope(node *Scope) scopeOption {
	return func(m *ScopeMutation) {
		m.oldValue = func(context.Context) (*Scope, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScopeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScopeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Scope entities.
func (m *ScopeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ScopeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *ScopeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ScopeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ScopeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ScopeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ScopeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ScopeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ScopeMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ScopeMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ScopeMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[scope.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ScopeMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[scope.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ScopeMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, scope.FieldDeletedAt)
}

// SetCustomID sets the "custom_id" field.
func (m *ScopeMutation) SetCustomID(s string) {
	m.custom_id = &s
}

// CustomID returns the value of the "custom_id" field in the mutation.
func (m *ScopeMutation) CustomID() (r string, exists bool) {
	v := m.custom_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomID returns the old "custom_id" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldCustomID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCustomID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCustomID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomID: %w", err)
	}
	return oldValue.CustomID, nil
}

// ResetCustomID resets all changes to the "custom_id" field.
func (m *ScopeMutation) ResetCustomID() {
	m.custom_id = nil
}

// SetNonce sets the "nonce" field.
func (m *ScopeMutation) SetNonce(s string) {
	m.nonce = &s
}

// Nonce returns the value of the "nonce" field in the mutation.
func (m *ScopeMutation) Nonce() (r string, exists bool) {
	v := m.nonce
	if v == nil {
		return
	}
	return *v, true
}

// OldNonce returns the old "nonce" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldNonce(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNonce is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNonce requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNonce: %w", err)
	}
	return oldValue.Nonce, nil
}

// ResetNonce resets all changes to the "nonce" field.
func (m *ScopeMutation) ResetNonce() {
	m.nonce = nil
}

// SetDomain sets the "domain" field.
func (m *ScopeMutation) SetDomain(s string) {
	m.domain = &s
}

// Domain returns the value of the "domain" field in the mutation.
func (m *ScopeMutation) Domain() (r string, exists bool) {
	v := m.domain
	if v == nil {
		return
	}
	return *v, true
}

// OldDomain returns the old "domain" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldDomain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDomain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDomain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomain: %w", err)
	}
	return oldValue.Domain, nil
}

// ResetDomain resets all changes to the "domain" field.
func (m *ScopeMutation) ResetDomain() {
	m.domain = nil
}

// AddFactIDs adds the "facts" edge to the Fact entity by ids.
func (m *ScopeMutation) AddFactIDs(ids ...string) {
	if m.facts == nil {
		m.facts = make(map[string]struct{})
	}
	for i := range ids {
		m.facts[ids[i]] = struct{}{}
	}
}

// ClearFacts clears the "facts" edge to the Fact entity.
func (m *ScopeMutation) ClearFacts() {
	m.clearedfacts = true
}

// FactsCleared returns if the "facts" edge to the Fact entity was cleared.
func (m *ScopeMutation) FactsCleared() bool {
	return m.clearedfacts
}

// RemoveFactIDs removes the "facts" edge to the Fact entity by IDs.
func (m *ScopeMutation) RemoveFactIDs(ids ...string) {
	if m.removedfacts == nil {
		m.removedfacts = make(map[string]struct{})
	}
	for i := range ids {
		m.removedfacts[ids[i]] = struct{}{}
	}
}

// RemovedFacts returns the removed IDs of the "facts" edge to the Fact entity.
func (m *ScopeMutation) RemovedFactsIDs() (ids []string) {
	for id := range m.removedfacts {
		ids = append(ids, id)
	}
	return
}

// FactsIDs returns the "facts" edge IDs in the mutation.
func (m *ScopeMutation) FactsIDs() (ids []string) {
	for id := range m.facts {
		ids = append(ids, id)
	}
	return
}

// ResetFacts resets all changes to the "facts" edge.
func (m *ScopeMutation) ResetFacts() {
	m.facts = nil
	m.clearedfacts = false
	m.removedfacts = nil
}

// Op returns the operation name.
func (m *ScopeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Scope).
func (m *ScopeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScopeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, scope.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, scope.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, scope.FieldDeletedAt)
	}
	if m.custom_id != nil {
		fields = append(fields, scope.FieldCustomID)
	}
	if m.nonce != nil {
		fields = append(fields, scope.FieldNonce)
	}
	if m.domain != nil {
		fields = append(fields, scope.FieldDomain)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScopeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case scope.FieldCreatedAt:
		return m.CreatedAt()
	case scope.FieldUpdatedAt:
		return m.UpdatedAt()
	case scope.FieldDeletedAt:
		return m.DeletedAt()
	case scope.FieldCustomID:
		return m.CustomID()
	case scope.FieldNonce:
		return m.Nonce()
	case scope.FieldDomain:
		return m.Domain()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScopeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case scope.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case scope.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case scope.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case scope.FieldCustomID:
		return m.OldCustomID(ctx)
	case scope.FieldNonce:
		return m.OldNonce(ctx)
	case scope.FieldDomain:
		return m.OldDomain(ctx)
	}
	return nil, fmt.Errorf("unknown Scope field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScopeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case scope.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case scope.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case scope.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case scope.FieldCustomID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomID(v)
		return nil
	case scope.FieldNonce:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNonce(v)
		return nil
	case scope.FieldDomain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomain(v)
		return nil
	}
	return fmt.Errorf("unknown Scope field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScopeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScopeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScopeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Scope numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScopeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(scope.FieldDeletedAt) {
		fields = append(fields, scope.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScopeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScopeMutation) ClearField(name string) error {
	switch name {
	case scope.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Scope nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScopeMutation) ResetField(name string) error {
	switch name {
	case scope.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case scope.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case scope.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case scope.FieldCustomID:
		m.ResetCustomID()
		return nil
	case scope.FieldNonce:
		m.ResetNonce()
		return nil
	case scope.FieldDomain:
		m.ResetDomain()
		return nil
	}
	return fmt.Errorf("unknown Scope field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScopeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.facts != nil {
		edges = append(edges, scope.EdgeFacts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScopeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case scope.EdgeFacts:
		ids := make([]ent.Value, 0, len(m.facts))
		for id := range m.facts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScopeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfacts != nil {
		edges = append(edges, scope.EdgeFacts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScopeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case scope.EdgeFacts:
		ids := make([]ent.Value, 0, len(m.removedfacts))
		for id := range m.removedfacts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScopeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfacts {
		edges = append(edges, scope.EdgeFacts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScopeMutation) EdgeCleared(name string) bool {
	switch name {
	case scope.EdgeFacts:
		return m.clearedfacts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScopeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Scope unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScopeMutation) ResetEdge(name string) error {
	switch name {
	case scope.EdgeFacts:
		m.ResetFacts()
		return nil
	}
	return fmt.Errorf("unknown Scope edge %s", name)
}
