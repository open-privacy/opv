// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/open-privacy/opv/pkg/ent/fact"
	"github.com/open-privacy/opv/pkg/ent/facttype"
	"github.com/open-privacy/opv/pkg/ent/predicate"
	"github.com/open-privacy/opv/pkg/ent/scope"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFact     = "Fact"
	TypeFactType = "FactType"
	TypeScope    = "Scope"
)

// FactMutation represents an operation that mutates the Fact nodes in the graph.
type FactMutation struct {
	config
	op               Op
	typ              string
	id               *string
	create_time      *time.Time
	update_time      *time.Time
	hashed_value     *string
	encrypted_value  *string
	clearedFields    map[string]struct{}
	scope            *string
	clearedscope     bool
	fact_type        *string
	clearedfact_type bool
	done             bool
	oldValue         func(context.Context) (*Fact, error)
	predicates       []predicate.Fact
}

var _ ent.Mutation = (*FactMutation)(nil)

// factOption allows management of the mutation configuration using functional options.
type factOption func(*FactMutation)

// newFactMutation creates new mutation for the Fact entity.
func newFactMutation(c config, op Op, opts ...factOption) *FactMutation {
	m := &FactMutation{
		config:        c,
		op:            op,
		typ:           TypeFact,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFactID sets the ID field of the mutation.
func withFactID(id string) factOption {
	return func(m *FactMutation) {
		var (
			err   error
			once  sync.Once
			value *Fact
		)
		m.oldValue = func(ctx context.Context) (*Fact, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Fact.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFact sets the old Fact of the mutation.
func withFact(node *Fact) factOption {
	return func(m *FactMutation) {
		m.oldValue = func(context.Context) (*Fact, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FactMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FactMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Fact entities.
func (m *FactMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *FactMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *FactMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *FactMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Fact entity.
// If the Fact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *FactMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *FactMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *FactMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Fact entity.
// If the Fact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *FactMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetHashedValue sets the "hashed_value" field.
func (m *FactMutation) SetHashedValue(s string) {
	m.hashed_value = &s
}

// HashedValue returns the value of the "hashed_value" field in the mutation.
func (m *FactMutation) HashedValue() (r string, exists bool) {
	v := m.hashed_value
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedValue returns the old "hashed_value" field's value of the Fact entity.
// If the Fact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactMutation) OldHashedValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHashedValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHashedValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedValue: %w", err)
	}
	return oldValue.HashedValue, nil
}

// ResetHashedValue resets all changes to the "hashed_value" field.
func (m *FactMutation) ResetHashedValue() {
	m.hashed_value = nil
}

// SetEncryptedValue sets the "encrypted_value" field.
func (m *FactMutation) SetEncryptedValue(s string) {
	m.encrypted_value = &s
}

// EncryptedValue returns the value of the "encrypted_value" field in the mutation.
func (m *FactMutation) EncryptedValue() (r string, exists bool) {
	v := m.encrypted_value
	if v == nil {
		return
	}
	return *v, true
}

// OldEncryptedValue returns the old "encrypted_value" field's value of the Fact entity.
// If the Fact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactMutation) OldEncryptedValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEncryptedValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEncryptedValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEncryptedValue: %w", err)
	}
	return oldValue.EncryptedValue, nil
}

// ResetEncryptedValue resets all changes to the "encrypted_value" field.
func (m *FactMutation) ResetEncryptedValue() {
	m.encrypted_value = nil
}

// SetScopeID sets the "scope" edge to the Scope entity by id.
func (m *FactMutation) SetScopeID(id string) {
	m.scope = &id
}

// ClearScope clears the "scope" edge to the Scope entity.
func (m *FactMutation) ClearScope() {
	m.clearedscope = true
}

// ScopeCleared returns if the "scope" edge to the Scope entity was cleared.
func (m *FactMutation) ScopeCleared() bool {
	return m.clearedscope
}

// ScopeID returns the "scope" edge ID in the mutation.
func (m *FactMutation) ScopeID() (id string, exists bool) {
	if m.scope != nil {
		return *m.scope, true
	}
	return
}

// ScopeIDs returns the "scope" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ScopeID instead. It exists only for internal usage by the builders.
func (m *FactMutation) ScopeIDs() (ids []string) {
	if id := m.scope; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetScope resets all changes to the "scope" edge.
func (m *FactMutation) ResetScope() {
	m.scope = nil
	m.clearedscope = false
}

// SetFactTypeID sets the "fact_type" edge to the FactType entity by id.
func (m *FactMutation) SetFactTypeID(id string) {
	m.fact_type = &id
}

// ClearFactType clears the "fact_type" edge to the FactType entity.
func (m *FactMutation) ClearFactType() {
	m.clearedfact_type = true
}

// FactTypeCleared returns if the "fact_type" edge to the FactType entity was cleared.
func (m *FactMutation) FactTypeCleared() bool {
	return m.clearedfact_type
}

// FactTypeID returns the "fact_type" edge ID in the mutation.
func (m *FactMutation) FactTypeID() (id string, exists bool) {
	if m.fact_type != nil {
		return *m.fact_type, true
	}
	return
}

// FactTypeIDs returns the "fact_type" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FactTypeID instead. It exists only for internal usage by the builders.
func (m *FactMutation) FactTypeIDs() (ids []string) {
	if id := m.fact_type; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFactType resets all changes to the "fact_type" edge.
func (m *FactMutation) ResetFactType() {
	m.fact_type = nil
	m.clearedfact_type = false
}

// Op returns the operation name.
func (m *FactMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Fact).
func (m *FactMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FactMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, fact.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, fact.FieldUpdateTime)
	}
	if m.hashed_value != nil {
		fields = append(fields, fact.FieldHashedValue)
	}
	if m.encrypted_value != nil {
		fields = append(fields, fact.FieldEncryptedValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FactMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fact.FieldCreateTime:
		return m.CreateTime()
	case fact.FieldUpdateTime:
		return m.UpdateTime()
	case fact.FieldHashedValue:
		return m.HashedValue()
	case fact.FieldEncryptedValue:
		return m.EncryptedValue()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FactMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fact.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case fact.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case fact.FieldHashedValue:
		return m.OldHashedValue(ctx)
	case fact.FieldEncryptedValue:
		return m.OldEncryptedValue(ctx)
	}
	return nil, fmt.Errorf("unknown Fact field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FactMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fact.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case fact.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case fact.FieldHashedValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedValue(v)
		return nil
	case fact.FieldEncryptedValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEncryptedValue(v)
		return nil
	}
	return fmt.Errorf("unknown Fact field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FactMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FactMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FactMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Fact numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FactMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FactMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FactMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Fact nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FactMutation) ResetField(name string) error {
	switch name {
	case fact.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case fact.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case fact.FieldHashedValue:
		m.ResetHashedValue()
		return nil
	case fact.FieldEncryptedValue:
		m.ResetEncryptedValue()
		return nil
	}
	return fmt.Errorf("unknown Fact field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FactMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.scope != nil {
		edges = append(edges, fact.EdgeScope)
	}
	if m.fact_type != nil {
		edges = append(edges, fact.EdgeFactType)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FactMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case fact.EdgeScope:
		if id := m.scope; id != nil {
			return []ent.Value{*id}
		}
	case fact.EdgeFactType:
		if id := m.fact_type; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FactMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FactMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FactMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedscope {
		edges = append(edges, fact.EdgeScope)
	}
	if m.clearedfact_type {
		edges = append(edges, fact.EdgeFactType)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FactMutation) EdgeCleared(name string) bool {
	switch name {
	case fact.EdgeScope:
		return m.clearedscope
	case fact.EdgeFactType:
		return m.clearedfact_type
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FactMutation) ClearEdge(name string) error {
	switch name {
	case fact.EdgeScope:
		m.ClearScope()
		return nil
	case fact.EdgeFactType:
		m.ClearFactType()
		return nil
	}
	return fmt.Errorf("unknown Fact unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FactMutation) ResetEdge(name string) error {
	switch name {
	case fact.EdgeScope:
		m.ResetScope()
		return nil
	case fact.EdgeFactType:
		m.ResetFactType()
		return nil
	}
	return fmt.Errorf("unknown Fact edge %s", name)
}

// FactTypeMutation represents an operation that mutates the FactType nodes in the graph.
type FactTypeMutation struct {
	config
	op            Op
	typ           string
	id            *string
	create_time   *time.Time
	update_time   *time.Time
	slug          *string
	builtin       *bool
	clearedFields map[string]struct{}
	facts         map[string]struct{}
	removedfacts  map[string]struct{}
	clearedfacts  bool
	done          bool
	oldValue      func(context.Context) (*FactType, error)
	predicates    []predicate.FactType
}

var _ ent.Mutation = (*FactTypeMutation)(nil)

// facttypeOption allows management of the mutation configuration using functional options.
type facttypeOption func(*FactTypeMutation)

// newFactTypeMutation creates new mutation for the FactType entity.
func newFactTypeMutation(c config, op Op, opts ...facttypeOption) *FactTypeMutation {
	m := &FactTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeFactType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFactTypeID sets the ID field of the mutation.
func withFactTypeID(id string) facttypeOption {
	return func(m *FactTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *FactType
		)
		m.oldValue = func(ctx context.Context) (*FactType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FactType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFactType sets the old FactType of the mutation.
func withFactType(node *FactType) facttypeOption {
	return func(m *FactTypeMutation) {
		m.oldValue = func(context.Context) (*FactType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FactTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FactTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FactType entities.
func (m *FactTypeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *FactTypeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *FactTypeMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *FactTypeMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the FactType entity.
// If the FactType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactTypeMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *FactTypeMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *FactTypeMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *FactTypeMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the FactType entity.
// If the FactType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactTypeMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *FactTypeMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetSlug sets the "slug" field.
func (m *FactTypeMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *FactTypeMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the FactType entity.
// If the FactType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactTypeMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *FactTypeMutation) ResetSlug() {
	m.slug = nil
}

// SetBuiltin sets the "builtin" field.
func (m *FactTypeMutation) SetBuiltin(b bool) {
	m.builtin = &b
}

// Builtin returns the value of the "builtin" field in the mutation.
func (m *FactTypeMutation) Builtin() (r bool, exists bool) {
	v := m.builtin
	if v == nil {
		return
	}
	return *v, true
}

// OldBuiltin returns the old "builtin" field's value of the FactType entity.
// If the FactType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FactTypeMutation) OldBuiltin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBuiltin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBuiltin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuiltin: %w", err)
	}
	return oldValue.Builtin, nil
}

// ResetBuiltin resets all changes to the "builtin" field.
func (m *FactTypeMutation) ResetBuiltin() {
	m.builtin = nil
}

// AddFactIDs adds the "facts" edge to the Fact entity by ids.
func (m *FactTypeMutation) AddFactIDs(ids ...string) {
	if m.facts == nil {
		m.facts = make(map[string]struct{})
	}
	for i := range ids {
		m.facts[ids[i]] = struct{}{}
	}
}

// ClearFacts clears the "facts" edge to the Fact entity.
func (m *FactTypeMutation) ClearFacts() {
	m.clearedfacts = true
}

// FactsCleared returns if the "facts" edge to the Fact entity was cleared.
func (m *FactTypeMutation) FactsCleared() bool {
	return m.clearedfacts
}

// RemoveFactIDs removes the "facts" edge to the Fact entity by IDs.
func (m *FactTypeMutation) RemoveFactIDs(ids ...string) {
	if m.removedfacts == nil {
		m.removedfacts = make(map[string]struct{})
	}
	for i := range ids {
		m.removedfacts[ids[i]] = struct{}{}
	}
}

// RemovedFacts returns the removed IDs of the "facts" edge to the Fact entity.
func (m *FactTypeMutation) RemovedFactsIDs() (ids []string) {
	for id := range m.removedfacts {
		ids = append(ids, id)
	}
	return
}

// FactsIDs returns the "facts" edge IDs in the mutation.
func (m *FactTypeMutation) FactsIDs() (ids []string) {
	for id := range m.facts {
		ids = append(ids, id)
	}
	return
}

// ResetFacts resets all changes to the "facts" edge.
func (m *FactTypeMutation) ResetFacts() {
	m.facts = nil
	m.clearedfacts = false
	m.removedfacts = nil
}

// Op returns the operation name.
func (m *FactTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FactType).
func (m *FactTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FactTypeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, facttype.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, facttype.FieldUpdateTime)
	}
	if m.slug != nil {
		fields = append(fields, facttype.FieldSlug)
	}
	if m.builtin != nil {
		fields = append(fields, facttype.FieldBuiltin)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FactTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case facttype.FieldCreateTime:
		return m.CreateTime()
	case facttype.FieldUpdateTime:
		return m.UpdateTime()
	case facttype.FieldSlug:
		return m.Slug()
	case facttype.FieldBuiltin:
		return m.Builtin()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FactTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case facttype.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case facttype.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case facttype.FieldSlug:
		return m.OldSlug(ctx)
	case facttype.FieldBuiltin:
		return m.OldBuiltin(ctx)
	}
	return nil, fmt.Errorf("unknown FactType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FactTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case facttype.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case facttype.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case facttype.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case facttype.FieldBuiltin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuiltin(v)
		return nil
	}
	return fmt.Errorf("unknown FactType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FactTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FactTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FactTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FactType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FactTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FactTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FactTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FactType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FactTypeMutation) ResetField(name string) error {
	switch name {
	case facttype.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case facttype.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case facttype.FieldSlug:
		m.ResetSlug()
		return nil
	case facttype.FieldBuiltin:
		m.ResetBuiltin()
		return nil
	}
	return fmt.Errorf("unknown FactType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FactTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.facts != nil {
		edges = append(edges, facttype.EdgeFacts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FactTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case facttype.EdgeFacts:
		ids := make([]ent.Value, 0, len(m.facts))
		for id := range m.facts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FactTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfacts != nil {
		edges = append(edges, facttype.EdgeFacts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FactTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case facttype.EdgeFacts:
		ids := make([]ent.Value, 0, len(m.removedfacts))
		for id := range m.removedfacts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FactTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfacts {
		edges = append(edges, facttype.EdgeFacts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FactTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case facttype.EdgeFacts:
		return m.clearedfacts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FactTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown FactType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FactTypeMutation) ResetEdge(name string) error {
	switch name {
	case facttype.EdgeFacts:
		m.ResetFacts()
		return nil
	}
	return fmt.Errorf("unknown FactType edge %s", name)
}

// ScopeMutation represents an operation that mutates the Scope nodes in the graph.
type ScopeMutation struct {
	config
	op            Op
	typ           string
	id            *string
	create_time   *time.Time
	update_time   *time.Time
	custom_id     *string
	nonce         *string
	clearedFields map[string]struct{}
	facts         map[string]struct{}
	removedfacts  map[string]struct{}
	clearedfacts  bool
	done          bool
	oldValue      func(context.Context) (*Scope, error)
	predicates    []predicate.Scope
}

var _ ent.Mutation = (*ScopeMutation)(nil)

// scopeOption allows management of the mutation configuration using functional options.
type scopeOption func(*ScopeMutation)

// newScopeMutation creates new mutation for the Scope entity.
func newScopeMutation(c config, op Op, opts ...scopeOption) *ScopeMutation {
	m := &ScopeMutation{
		config:        c,
		op:            op,
		typ:           TypeScope,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScopeID sets the ID field of the mutation.
func withScopeID(id string) scopeOption {
	return func(m *ScopeMutation) {
		var (
			err   error
			once  sync.Once
			value *Scope
		)
		m.oldValue = func(ctx context.Context) (*Scope, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Scope.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScope sets the old Scope of the mutation.
func withScope(node *Scope) scopeOption {
	return func(m *ScopeMutation) {
		m.oldValue = func(context.Context) (*Scope, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScopeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScopeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Scope entities.
func (m *ScopeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ScopeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ScopeMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ScopeMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ScopeMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ScopeMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ScopeMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ScopeMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetCustomID sets the "custom_id" field.
func (m *ScopeMutation) SetCustomID(s string) {
	m.custom_id = &s
}

// CustomID returns the value of the "custom_id" field in the mutation.
func (m *ScopeMutation) CustomID() (r string, exists bool) {
	v := m.custom_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomID returns the old "custom_id" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldCustomID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCustomID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCustomID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomID: %w", err)
	}
	return oldValue.CustomID, nil
}

// ResetCustomID resets all changes to the "custom_id" field.
func (m *ScopeMutation) ResetCustomID() {
	m.custom_id = nil
}

// SetNonce sets the "nonce" field.
func (m *ScopeMutation) SetNonce(s string) {
	m.nonce = &s
}

// Nonce returns the value of the "nonce" field in the mutation.
func (m *ScopeMutation) Nonce() (r string, exists bool) {
	v := m.nonce
	if v == nil {
		return
	}
	return *v, true
}

// OldNonce returns the old "nonce" field's value of the Scope entity.
// If the Scope object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScopeMutation) OldNonce(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNonce is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNonce requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNonce: %w", err)
	}
	return oldValue.Nonce, nil
}

// ResetNonce resets all changes to the "nonce" field.
func (m *ScopeMutation) ResetNonce() {
	m.nonce = nil
}

// AddFactIDs adds the "facts" edge to the Fact entity by ids.
func (m *ScopeMutation) AddFactIDs(ids ...string) {
	if m.facts == nil {
		m.facts = make(map[string]struct{})
	}
	for i := range ids {
		m.facts[ids[i]] = struct{}{}
	}
}

// ClearFacts clears the "facts" edge to the Fact entity.
func (m *ScopeMutation) ClearFacts() {
	m.clearedfacts = true
}

// FactsCleared returns if the "facts" edge to the Fact entity was cleared.
func (m *ScopeMutation) FactsCleared() bool {
	return m.clearedfacts
}

// RemoveFactIDs removes the "facts" edge to the Fact entity by IDs.
func (m *ScopeMutation) RemoveFactIDs(ids ...string) {
	if m.removedfacts == nil {
		m.removedfacts = make(map[string]struct{})
	}
	for i := range ids {
		m.removedfacts[ids[i]] = struct{}{}
	}
}

// RemovedFacts returns the removed IDs of the "facts" edge to the Fact entity.
func (m *ScopeMutation) RemovedFactsIDs() (ids []string) {
	for id := range m.removedfacts {
		ids = append(ids, id)
	}
	return
}

// FactsIDs returns the "facts" edge IDs in the mutation.
func (m *ScopeMutation) FactsIDs() (ids []string) {
	for id := range m.facts {
		ids = append(ids, id)
	}
	return
}

// ResetFacts resets all changes to the "facts" edge.
func (m *ScopeMutation) ResetFacts() {
	m.facts = nil
	m.clearedfacts = false
	m.removedfacts = nil
}

// Op returns the operation name.
func (m *ScopeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Scope).
func (m *ScopeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScopeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, scope.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, scope.FieldUpdateTime)
	}
	if m.custom_id != nil {
		fields = append(fields, scope.FieldCustomID)
	}
	if m.nonce != nil {
		fields = append(fields, scope.FieldNonce)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScopeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case scope.FieldCreateTime:
		return m.CreateTime()
	case scope.FieldUpdateTime:
		return m.UpdateTime()
	case scope.FieldCustomID:
		return m.CustomID()
	case scope.FieldNonce:
		return m.Nonce()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScopeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case scope.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case scope.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case scope.FieldCustomID:
		return m.OldCustomID(ctx)
	case scope.FieldNonce:
		return m.OldNonce(ctx)
	}
	return nil, fmt.Errorf("unknown Scope field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScopeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case scope.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case scope.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case scope.FieldCustomID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomID(v)
		return nil
	case scope.FieldNonce:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNonce(v)
		return nil
	}
	return fmt.Errorf("unknown Scope field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScopeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScopeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScopeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Scope numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScopeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScopeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScopeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Scope nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScopeMutation) ResetField(name string) error {
	switch name {
	case scope.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case scope.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case scope.FieldCustomID:
		m.ResetCustomID()
		return nil
	case scope.FieldNonce:
		m.ResetNonce()
		return nil
	}
	return fmt.Errorf("unknown Scope field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScopeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.facts != nil {
		edges = append(edges, scope.EdgeFacts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScopeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case scope.EdgeFacts:
		ids := make([]ent.Value, 0, len(m.facts))
		for id := range m.facts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScopeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfacts != nil {
		edges = append(edges, scope.EdgeFacts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScopeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case scope.EdgeFacts:
		ids := make([]ent.Value, 0, len(m.removedfacts))
		for id := range m.removedfacts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScopeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfacts {
		edges = append(edges, scope.EdgeFacts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScopeMutation) EdgeCleared(name string) bool {
	switch name {
	case scope.EdgeFacts:
		return m.clearedfacts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScopeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Scope unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScopeMutation) ResetEdge(name string) error {
	switch name {
	case scope.EdgeFacts:
		m.ResetFacts()
		return nil
	}
	return fmt.Errorf("unknown Scope edge %s", name)
}
