<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on</title><link>/docs/overview/</link><description>Recent content in Overview on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/docs/overview/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Introduction</title><link>/docs/overview/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/introduction/</guid><description>Open Privacy Vault - Secure, Performant, Open Source PII as a Service.
Quick Start Running OPV locally Start from source code:
git clone https://github.com/open-privacy/opv cd opv make vendor make run Start from docker image (TODO):
docker run -it -p 27999-28001:27999-28001 open-privacy/opv Test Local APIs Now you can test the APIs with curl.
# Create a new grant token from the control plane http://localhost:27999 curl -X POST &amp;#39;http://localhost:27999/api/v1/grants&amp;#39; \ --header &amp;#39;Content-Type: application/json&amp;#39; \ --data-raw &amp;#39;{ &amp;#34;allowed_http_methods&amp;#34;: [&amp;#34;*&amp;#34;], &amp;#34;domain&amp;#34;: &amp;#34;test.</description></item><item><title>2. Architecture</title><link>/docs/overview/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/architecture/</guid><description>Network Components Data Models</description></item><item><title>3. Planes</title><link>/docs/overview/planes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/planes/</guid><description>Planes are separated entrypoints and ports to access different segments of OPV. Currently OPV is planning to support the following planes:
Control Plane Data Plane Proxy Plane (TODO) Control Plane Control plane (default port: 27999) is a group of controllers that handle the admin related logic. In your network, you should do your best to isolate the access to the control plane.
ðŸ‘‰ Please don't expose control plane to the public network.</description></item><item><title>4. Env Configuration</title><link>/docs/overview/env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/env/</guid><description>OPV&amp;rsquo;s configuration is currently done via environment variables. Please follow the source code and comments.
env.go</description></item><item><title>5. Encryption</title><link>/docs/overview/encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/encryption/</guid><description>Supported Encryption Engine OPV&amp;rsquo;s encryption is designed to work with multiple encryption engines. Currently supported encryption engines are
NaCl Secretbox Hashicorp Vault (TODO) Transit Secret Built-in secretbox encryption engine Secretbox uses XSalsa20 and Poly1305 to encrypt and authenticate messages with secret-key cryptography.
For example, to configure the built-in secretbox encryption engine, you can set a list of secret keys to use. The first key is always the secret key for encryption, and all the keys will be used for decryption, which allows key rotation.</description></item><item><title>6. Hash</title><link>/docs/overview/hash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/hash/</guid><description>Supported Hashing Algorithms OPV&amp;rsquo;s hash function is designed to generate consistent hash so that we can enable optional equal-match search without storing the plaintext of PII information. Currently supported hash algorithms are
Scrypt SHA3 (keccak256)</description></item><item><title>7. Auth</title><link>/docs/overview/auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/auth/</guid><description>Authentication OPV uses Key-Auth (HTTP Header X-OPV-GRANT-TOKEN) for authentication. Notice that by default any request to the data plane (except /api/v1/healthz checks) should be authenticated.
Authorization OPV uses casbin for authorization. We leverage the RBAC with multi domain model to have fine-grained access control of the Grant Token. See RBAC model definition.
# RBAC with domain pattern model # https://github.com/casbin/casbin/blob/master/examples/rbac_with_domain_pattern_model.conf [request_definition] r = sub, dom, obj, act [policy_definition] p = sub, dom, obj, act, eft [role_definition] g = _, _, _ [policy_effect] e = some(where (p.</description></item><item><title>8. Database</title><link>/docs/overview/database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/database/</guid><description>Supported databases MySQL Vitess(MySQL driver) PostgreSQL SQLite MongoDB (TODO) DocumentDB (TODO) DynamoDB (TODO) Redis (TODO) Currently, OPV uses the ent framework to connect to SQL databases.</description></item><item><title>9. PII Fact Types</title><link>/docs/overview/fact_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/fact_types/</guid><description>Built-in Fact Types OPV supports a long list of built-in fact types to determine . For example email, ssn, ssnstrict, phonenumber, and etc. The full list of the current fact types can be found at
curl --request GET \ --url http://127.0.0.1:28000/api/v1/fact_types \ --header &amp;#39;x-opv-grant-token: v1:example.com:yourtoken&amp;#39; Example of the built-in fact type slugs:
[ &amp;#34;IMEI&amp;#34;, &amp;#34;ISO3166Alpha2&amp;#34;, &amp;#34;ISO3166Alpha3&amp;#34;, &amp;#34;ISO4217&amp;#34;, &amp;#34;address&amp;#34;, &amp;#34;alpha&amp;#34;, &amp;#34;alphanum&amp;#34;, &amp;#34;ascii&amp;#34;, &amp;#34;base64&amp;#34;, &amp;#34;creditcard&amp;#34;, &amp;#34;datauri&amp;#34;, &amp;#34;dialstring&amp;#34;, &amp;#34;dns&amp;#34;, &amp;#34;email&amp;#34;, &amp;#34;float&amp;#34;, &amp;#34;fullwidth&amp;#34;, &amp;#34;halfwidth&amp;#34;, &amp;#34;hexadecimal&amp;#34;, &amp;#34;hexcolor&amp;#34;, &amp;#34;host&amp;#34;, &amp;#34;int&amp;#34;, &amp;#34;ip&amp;#34;, &amp;#34;ipv4&amp;#34;, &amp;#34;ipv6&amp;#34;, &amp;#34;isbn10&amp;#34;, &amp;#34;isbn13&amp;#34;, &amp;#34;json&amp;#34;, &amp;#34;latitude&amp;#34;, &amp;#34;longitude&amp;#34;, &amp;#34;lowercase&amp;#34;, &amp;#34;mac&amp;#34;, &amp;#34;multibyte&amp;#34;, &amp;#34;notnull&amp;#34;, &amp;#34;null&amp;#34;, &amp;#34;numeric&amp;#34;, &amp;#34;phonenumber&amp;#34;, &amp;#34;photourl&amp;#34;, &amp;#34;port&amp;#34;, &amp;#34;printableascii&amp;#34;, &amp;#34;requri&amp;#34;, &amp;#34;requrl&amp;#34;, &amp;#34;rfc3339&amp;#34;, &amp;#34;rfc3339WithoutZone&amp;#34;, &amp;#34;rgbcolor&amp;#34;, &amp;#34;semver&amp;#34;, &amp;#34;ssn&amp;#34;, &amp;#34;ssnstrict&amp;#34;, &amp;#34;uppercase&amp;#34;, &amp;#34;url&amp;#34;, &amp;#34;utfdigit&amp;#34;, &amp;#34;utfletter&amp;#34;, &amp;#34;utfletternum&amp;#34;, &amp;#34;utfnumeric&amp;#34;, &amp;#34;uuid&amp;#34;, &amp;#34;uuidv3&amp;#34;, &amp;#34;uuidv4&amp;#34;, &amp;#34;uuidv5&amp;#34;, &amp;#34;variablewidth&amp;#34;, ]</description></item></channel></rss>