<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on</title><link>/docs/development/</link><description>Recent content in Development on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/docs/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Playground</title><link>/docs/development/playground/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/playground/</guid><description>ðŸ‘‰ All the testing grant tokens or API tokens used below are for demo purpose only. Data Plane Demo Playground demo of tokenization and detokenization via the Data Plane: https://playground.openprivacy.io.
For tokenization, we are using a public OPV grant token that&amp;rsquo;s only writtable to data plane&amp;rsquo;s /js/v1/facts route. For detokenization, we are using a private OPV grant token that&amp;rsquo;s only readable to data plane&amp;rsquo;s /api/v1/facts/* route. Note that we highly recommend one don&amp;rsquo;t expose the token with read permissions to the public JavaScript client.</description></item><item><title>Data Plane API</title><link>/docs/development/dataplane_api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/dataplane_api/</guid><description>Sample Instructions:
Click &amp;ldquo;Authorize&amp;rdquo; and add a sandbox testing grant token v1:sandbox.example.com:Iy8TJZcuhicocCklFdwA. Click &amp;ldquo;POST /facts&amp;rdquo; and &amp;ldquo;Try it out&amp;rdquo;. Test APIs like create fact with a payload like the following { &amp;#34;fact_type_slug&amp;#34;: &amp;#34;ssn&amp;#34;, &amp;#34;scope_custom_id&amp;#34;: &amp;#34;customer_123&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;123-45-6789&amp;#34; }</description></item><item><title>Control Plane API</title><link>/docs/development/controlplane_api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/controlplane_api/</guid><description>TODO</description></item><item><title>Proxy Plane Config</title><link>/docs/development/proxyplane_config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/proxyplane_config/</guid><description>The configuration that the Proxy Plane needs to start is a single configuration file (e.g. opv-proxyplane-http.example.json).
OPV currently enables the proxy plane via KrakenD, thus the configuration file needs to be compatible with the KrakenD config format. One can learn about the structure of the JSON configuration file at Understanding the KrakenD configuration file.
Example Configuration Root Level At the root level, one can enable many configuration like debug, cache_ttl, and extra_config for CORS support.</description></item><item><title>Working with Source Code</title><link>/docs/development/source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/source/</guid><description>Development related commands can be found in the Makefile file.
Compile from the source Make sure you have go, make, docker, and docker-compose installed.
# Prepare dependencies make vendor # Compile and run the data plane and control plane make run One can open the local swagger UI to test the APIs:
Default DataPlane Swagger URL: http://127.0.0.1:28000/swagger/index.html Default ControlPlane Swagger URL: http://127.0.0.1:27999/swagger/index.html # Compile and run the proxy plane # It requires at least a &amp;#34;GET/POST /api/v1/facts&amp;#34; grant token to work OPV_PROXY_PLANE_DEFAULT_DP_GRANT_TOKEN=v1:sandbox.</description></item><item><title>FAQ</title><link>/docs/development/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/development/faq/</guid><description>How to migrate database? By default, OPV uses ent for auto migration. If the OPV_DB_DRIVER and OPV_DB_CONNECTION_STR is set corrently with the right database permission, OPV will run the database migration on startup (including both dataplane and controlplane).</description></item></channel></rss>