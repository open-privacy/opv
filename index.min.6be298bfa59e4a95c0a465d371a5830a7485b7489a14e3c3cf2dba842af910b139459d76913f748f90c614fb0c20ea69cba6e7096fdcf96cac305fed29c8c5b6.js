var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch({preset:'score',cache:!0,doc:{id:'id',field:['title','description','content'],store:['href','title','description']}}),c=[{id:0,href:"/docs/overview/introduction/",title:"1. Introduction",description:"Open Privacy Vault - Secure, Performant, Open Source PII as a Service.",content:`Open Privacy Vault (OPV) - Secure, Performant, Open Source PII as a Service. The goal of OPV is to provide an open standard of PII management. With Structural PII validation, performant APIs, pluggable databases, extendabale encryption and hashing engine, flexible policy and authorization, we are aiming to bring the highest open standard for the fair usage of PII.
Quick Start Running Local OPV Note that all the configuration of OPV is done through environment variables. For example, setting OPV_DB_DRIVER=mysql. See Env Configuration →.
Start with docker.
# Control Plane docker run -it \  -v /tmp/opv_data:/data \  -p 27999:27999 \  openprivacyio/opv \  controlplane # Data Plane docker run -it \  -v /tmp/opv_data:/data \  -p 28000:28000 \  openprivacyio/opv \  dataplane # Proxy Plane (Depends on Data Plane, and a grant token created from Control Plane) docker run -it \  -v /tmp/opv_data:/data \  -p 28001:28001 \  -e OPV_PROXY_PLANE_DEFAULT_DP_BASE_URL=&#39;http://127.0.0.1:28000&#39; \  -e OPV_PROXY_PLANE_DEFAULT_DP_GRANT_TOKEN=&#39;grant_token_that_can_read_write_facts&#39; \  openprivacyio/opv \  proxyplane Start from source code:
git clone https://github.com/open-privacy/opv cd opv make vendor # Start the control plane and data plane make run # Start the proxyplane (optional) OPV_PROXY_PLANE_DEFAULT_DP_GRANT_TOKEN=&lt;grant_token_that_can_read_write_facts&gt; make run_proxyplane Try it with the playground:
 https://playground.openprivacy.io/swagger/index.html A testing domain sandbox.example.com grant token ( v1:sandbox.example.com:Iy8TJZcuhicocCklFdwA ) can be used to test the playground. It has the permission to access to all the paths and http methods of the dataplane within the domain of sandbox.example.com.  { &#34;token&#34;: &#34;v1:sandbox.example.com:Iy8TJZcuhicocCklFdwA&#34;, &#34;domain&#34;: &#34;sandbox.example.com&#34;, &#34;allowed_http_methods&#34;: [&#34;*&#34;], &#34;paths&#34;: [&#34;*&#34;] } APIs For more information, please take a look at
 Data Plane API → Control Plane API → Proxy Plane Config →  Now you can test the APIs with curl.
# Create a new grant token from the control plane http://127.0.0.1:27999 curl -X POST &#39;http://127.0.0.1:27999/api/v1/grants&#39; \ --header &#39;Content-Type: application/json&#39; \ --data-raw &#39;{ &#34;allowed_http_methods&#34;: [&#34;*&#34;], &#34;paths&#34;: [&#34;*&#34;], &#34;domain&#34;: &#34;sandbox.example.com&#34; }&#39; # The response will give you a grant token for data plane access # You can pass the token via HTTP header X-OPV-GRANT-TOKEN { &#34;token&#34;: &#34;v1:sandbox.example.com:Iy8TJZcuhicocCklFdwA&#34;, &#34;domain&#34;: &#34;sandbox.example.com&#34;, &#34;allowed_http_methods&#34;: [&#34;*&#34;], &#34;paths&#34;: [&#34;*&#34;] } # Store a new fact by calling the data plane http://127.0.0.1:28000 # Please replace the token with the token you just got above curl -X POST &#39;http://127.0.0.1:28000/api/v1/facts&#39; \ -H &#39;Content-Type: application/json&#39; \ -H &#39;X-OPV-GRANT-TOKEN: v1:sandbox.example.com:Iy8TJZcuhicocCklFdwA&#39; \ --data-raw &#39;{ &#34;fact_type_slug&#34;: &#34;ssn&#34;, &#34;value&#34;: &#34;123-45-6789&#34; }&#39; One can open the local swagger UI to test the APIs:
 Default Control Plane Swagger URL:  http://127.0.0.1:27999/swagger/index.html   Default Data Plane Swagger URL:  http://127.0.0.1:28000/swagger/index.html    One can also test the proxyplane:
 Default Proxy Plane Port: http://127.0.0.1:28001  The routes of the proxy plane are defined at opv-proxyplane-http.example.json. Learn more at Proxy Plane Config →.    Performance Endpoint Latency We are expecting to see P99 &lt; 10ms latency when sending GET requests to /api/v1/facts/:id, which is the most heavily used endpoint to retrieve PIIs from a tokinized fact. We did some simple benchmarking (nowhere near perfert of course), to keep tracking the performance of the GET endpoints.
#!/bin/sh  # Make sure you have vegeta downlaoded. https://github.com/tsenart/vegeta # Replace the X-Opv-Grant-Token and fact_id for the benchmark script echo $&#39;GET http://127.0.0.1:28000/api/v1/facts/fact_1LqMuvudjA1xdtqbjd0l \nX-Opv-Grant-Token: v1:sandbox.example.com:Iy8TJZcuhicocCklFdwA&#39; \  | vegeta attack -duration=10s | vegeta report # Example of the result # $ sh vegeta.sh # Requests [total, rate, throughput] 500, 50.11, 50.11 # Duration [total, attack, wait] 9.978s, 9.977s, 1.17ms # Latencies [min, mean, 50, 90, 95, 99, max] 753.995µs, 1.679ms, 1.415ms, 2.564ms, 3.061ms, 6.926ms, 12.096ms # Bytes In [total, mean] 62000, 124.00 # Bytes Out [total, mean] 0, 0.00 # Success [ratio] 100.00% # Status Codes [code:count] 200:500 # Error Set: Prometheus Monitoring By default, prometheus metrics are enabled for both data plane and control plane (controlled by the environment variable OPV_PROMETHEUS_ENABLED). You can easily connect your prometheus scraper with the following config:
scrape_configs:- job_name:opv-metricsmetrics_path:/metricsstatic_configs:- targets:- &#34;opv_controlplane:27999&#34;# replace it with the actual controlplane&#39;s base URL- &#34;opv_dataplane:28000&#34;# replace it with the actual dataplane&#39;s base URLFor local benchmarking, we created a docker-compose network to test the prometheus and grafana, and we can closely monitor the performance regression.
cd ./benchmark docker-compse up --build `},{id:1,href:"/docs/development/playground/",title:"Playground",description:"OPV Playground",content:`👉 All the testing grant tokens or API tokens used below are for demo purpose only.  Data Plane Demo Playground demo of tokenization and detokenization via the Data Plane: https://playground.openprivacy.io.
 For tokenization, we are using a public OPV grant token that&rsquo;s only writtable to data plane&rsquo;s /js/v1/facts route. For detokenization, we are using a private OPV grant token that&rsquo;s only readable to data plane&rsquo;s /api/v1/facts/* route. Note that we highly recommend one don&rsquo;t expose the token with read permissions to the public JavaScript client. This detokenization is for demo purposes only.    Proxy Plane Demo Playground demo of sending API requests to Checkr via the Proxy Plane: proxy-playground.openprivacy.io.
 The definition of the proxy routing can be found at opv-proxyplane-http.example.json. We simulated that once the internal system have tokenzied facts (i.e. sensitive PIIs), it can talks to a dedicated proxy plane route for automated detokenization when sending the requests to external vendors like Checkr API. You can also inspect the network requests directly from your browser (tldr - press F12) to check the actual payload.   `},{id:2,href:"/docs/overview/architecture/",title:"2. Architecture",description:"OPV Architecture",content:`Network Components Data Models OPV features a pluggable database repository pattern. Currently the core data models are:
* Domain * Scope * Fact * FactType * Grant * API Audit Database doc can be generated by make tbls, and the detailed README can be found on dbdoc.
`},{id:3,href:"/docs/development/dataplane_api/",title:"Data Plane API",description:"Data Plane API",content:`Sample Instructions:
 Click &ldquo;Authorize&rdquo; and add a sandbox testing grant token v1:sandbox.example.com:Iy8TJZcuhicocCklFdwA. Click &ldquo;POST /facts&rdquo; and &ldquo;Try it out&rdquo;. Test APIs like create fact with a payload like the following  { &#34;fact_type_slug&#34;: &#34;ssn&#34;, &#34;scope_custom_id&#34;: &#34;customer_123&#34;, &#34;value&#34;: &#34;123-45-6789&#34; }  `},{id:4,href:"/docs/overview/planes/",title:"3. Planes",description:"OPV Planes",content:`Planes are separated entrypoints and ports to access different segments of OPV. Currently OPV supports the following planes:
 Control Plane Data Plane Proxy Plane  Control Plane Control plane (default port: 27999) is a group of controllers that handle the admin related logic. In your network, you should do your best to isolate the access to the control plane.
🔥️ Please don't expose control plane to the public network.  Control plane securely manages the following data models:
 Grant API Audit  To run the control plane:
docker run -it \  -v /tmp/opv_data:/data \  -p 27999:27999 \  openprivacyio/opv \  controlplane Control Plane Swagger
 Control Plane API → Local Swagger UI: http://127.0.0.1:27999/swagger/index.html  For example, once the control plane is ready, you can create a grant token for the data plane and the proxy plane.
curl -X POST &#39;http://127.0.0.1:27999/api/v1/grants&#39; \ --header &#39;Content-Type: application/json&#39; \ --data-raw &#39;{ &#34;allowed_http_methods&#34;: [&#34;*&#34;], &#34;paths&#34;: [&#34;*&#34;], &#34;domain&#34;: &#34;sandbox.example.com&#34; }&#39; Data Plane Data plane (default port: 28000) is a group of controllers that handle the crud logic related to PII information.
Data plane securely manages the following data models:
 Scope Fact Fact Types  To run the data plane:
docker run -it \  -v /tmp/opv_data:/data \  -p 28000:28000 \  openprivacyio/opv \  dataplane Data Plane Swagger
 Data Plane API → Local Swagger UI: http://127.0.0.1:28000/swagger/index.html  For example, to tokenize your PII is equivalent to creating a fact with the sensitive PII value encrypted. fact_type_slug is the slug representing the type of the fact and its validation rules. Currently, the full list of built-in fact types can be found in Fact Types →.
# Tokenize PII into fact curl -X POST &#39;http://127.0.0.1:28000/api/v1/facts&#39; \ -H &#39;Content-Type: application/json&#39; \ -H &#39;X-OPV-GRANT-TOKEN: v1:sandbox.example.com:Iy8TJZcuhicocCklFdwA&#39; \ --data-raw &#39;{ &#34;fact_type_slug&#34;: &#34;ssn&#34;, &#34;value&#34;: &#34;123-45-6789&#34; }&#39; # Detokenize PII from fact curl -X GET &#39;http://127.0.0.1:28000/api/v1/facts/fact_rawLfXBSJ0DQXUbtNPl4&#39; \ -H &#39;X-OPV-GRANT-TOKEN: v1:sandbox.example.com:Iy8TJZcuhicocCklFdwA&#39; Proxy Plane Proxy plane modifies the payload on-the-fly according to the routing rules specified. You can think of proxy plane as a man-in-the-middle that does the transformation of sensitive PII.
The rules are flexible that the action can be applied to specific parts of the HTTP requests and responses. For example, one can define a opv.body.Modifier rule like the following JSON config (for more information Proxy Plane Config →):
&#34;github.com/open-privacy/opv&#34;: { &#34;opv.body.Modifier&#34;: { &#34;scope&#34;: [ &#34;request&#34; ], &#34;items&#34;: [ { &#34;json_pointer_path&#34;: &#34;/first_name&#34;, &#34;fact_type_slug&#34;: &#34;ascii&#34;, &#34;action&#34;: &#34;tokenize&#34; } ] } } It will automatically convert the the payload that sends to this proxy route.
// &#34;action&#34;: &#34;tokenize&#34; { &#34;first_name&#34;: &#34;John&#34; } ====&gt; proxy as { &#34;first_name&#34;: &#34;fact_rawLfXBSJ0DQXUbtNPl4&#34; } // &#34;action&#34;: &#34;detokenize&#34; { &#34;first_name&#34;: &#34;fact_rawLfXBSJ0DQXUbtNPl4&#34; } ====&gt; proxy as { &#34;first_name&#34;: &#34;John&#34; } Proxy plane currently supports the following protocols and content types.
HTTP Content-Type: application/json Content-Type: text/html // coming soon: v1 roadmap Content-Type: text/xml, application/xml // coming soon: v1 roadmap SMTP // coming soon: v1 roadmap For more information about the proxy plane, please see
 Proxy Plane Config → Proxy Plane Playground →  `},{id:5,href:"/docs/development/controlplane_api/",title:"Control Plane API",description:"Control Plane API",content:`TODO
`},{id:6,href:"/docs/overview/env/",title:"4. Env Configuration",description:"OPV Environment Variables Configuration",content:`OPV&rsquo;s configuration is currently done via environment variables. Please follow the source code and comments.
env.go
`},{id:7,href:"/docs/development/proxyplane_config/",title:"Proxy Plane Config",description:"Proxy Plane Config",content:`TODO
`},{id:8,href:"/docs/overview/encryption/",title:"5. Encryption",description:"OPV Encryption",content:`Supported Encryption Engine OPV&rsquo;s encryption is designed to work with multiple encryption engines. Currently supported encryption engines are
 NaCl  Secretbox   Hashicorp Vault (TODO)  Transit Secret    Built-in secretbox encryption engine Secretbox uses XSalsa20 and Poly1305 to encrypt and authenticate messages with secret-key cryptography.
For example, to configure the built-in secretbox encryption engine, you can set a list of secret keys to use. The first key is always the secret key for encryption, and all the keys will be used for decryption, which allows key rotation.
OPV_ENCRYPTOR_SECRETBOX_KEYS=&#34;GKVB40Yk4JUQno9CVIKxH2uK343GHMVE,Y3XkLGAVQYnRNt1kXO6xyHhoY2pYeieh&#34; Make sure you use a secure random string generator with 32 bytes.
Hashicorp Vault Transit Secret Engine TODO
Encryption Engine Configuration For more details, see Env Configuration →.
`},{id:9,href:"/docs/development/source/",title:"Working with Source Code",description:"Go Source Code Development.",content:`Development related commands can be found in the Makefile file.
Compile from the source Make sure you have go, make, docker, and docker-compose installed.
# Prepare dependencies make vendor # Compile and run the data plane and control plane make run One can open the local swagger UI to test the APIs:
 Default DataPlane Swagger URL: http://127.0.0.1:28000/swagger/index.html Default ControlPlane Swagger URL: http://127.0.0.1:27999/swagger/index.html  # Compile and run the proxy plane # It requires at least a &#34;GET/POST /api/v1/facts&#34; grant token to work OPV_PROXY_PLANE_DEFAULT_DP_GRANT_TOKEN=v1:sandbox.example.com:Iy8TJZcuhicocCklFdwA make run_proxyplane Generate swagger 2.0 When you make any change to APIs (e.g. pkg/dataplane, pkg/controlplane, pkg/apimodel), you may want to regenerate the swagger 2.0 API doc. This is done by swag.
# Regenerate swagger 2.0 docs make swag Notice that dataplane and controlplane&rsquo;s entrypoints are separated, and they are defined in cmd/dataplane and cmd/controlplane.
Generate ent models If you want to migrate or change the schema of the data models, please change the schema files and then run the following command to re-generate the ent related data models.
# Regenerate ent data models make ent Note that ent will run the auto migration for schema changes.
Generate dbdoc with tbls This is to generate the dbdoc for Database Visualization →. We leverage a tool called https://github.com/k1LoW/tbls.
make run # Once make run is running, open a new terminal to generate the # database tables visualization from the default _opv.sqlite db locally. make tbls Tests Unit tests:
make test Functional tests (i.e. the integration tests):
# Note the functional tests will try to start 3 planes if they don&#39;t open ports locally make local_functional_test CI/CD All the CI are run on github. Please refer to https://github.com/open-privacy/opv/blob/main/.github/workflows/ci.yml.
Currently the playground is deployed and triggered by https://github.com/open-privacy/opv/blob/main/.github/workflows/deploy_opv_playground.yml.
`},{id:10,href:"/docs/overview/hash/",title:"6. Hash",description:"OPV Hash",content:`Supported Hashing Algorithms OPV&rsquo;s hash function is designed to generate consistent hash so that we can enable optional equal-match search without storing the plaintext of PII information. Currently supported hash algorithms are
 Scrypt SHA3 (keccak256)  `},{id:11,href:"/docs/development/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:`How to migrate database? By default, OPV uses ent for auto migration. If the OPV_DB_DRIVER and OPV_DB_CONNECTION_STR is set corrently with the right database permission, OPV will run the database migration on startup (including both dataplane and controlplane).
`},{id:12,href:"/docs/overview/auth/",title:"7. Auth",description:"OPV Authn and Authz",content:`Authentication OPV uses Key-Auth (HTTP Header X-OPV-GRANT-TOKEN) for authentication. Notice that by default any request to the data plane (except /api/v1/healthz checks) should be authenticated.
Authorization Grant Token A grant token is required to (1) access to the data plane and (2) deploy the proxy plane. A grant token can only be created from the control plane. For example, you can create a grant token with fine-grained control of what to access.
Omni Grant Token This creates an omni grant token to the sandbox.example.com domain that has access to all allowed_http_methods and all paths.
curl -X POST &#39;http://127.0.0.1:27999/api/v1/grants&#39; \ --header &#39;Content-Type: application/json&#39; \ --data-raw &#39;{ &#34;allowed_http_methods&#34;: [&#34;*&#34;], &#34;paths&#34;: [&#34;*&#34;], &#34;domain&#34;: &#34;sandbox.example.com&#34; }&#39; Normal Backend Application Grant Token This creates a normal backend application grant token to the sandbox.example.com domain that has access to POST/GET /api/v1/facts or /api/v1/facts/*.
curl -X POST &#39;http://127.0.0.1:27999/api/v1/grants&#39; \ --header &#39;Content-Type: application/json&#39; \ --data-raw &#39;{ &#34;allowed_http_methods&#34;: [&#34;POST&#34;, &#34;GET&#34;], &#34;paths&#34;: [&#34;/api/v1/facts&#34;, &#34;/api/v1/facts/*&#34;], &#34;domain&#34;: &#34;sandbox.example.com&#34; }&#39; Single Fact Access Grant Token This creates a single fact access grant token to the sandbox.example.com domain that has access to GET /api/v1/facts/fact_1LqMuvudjA1xdtqbjd0l.
curl -X POST &#39;http://127.0.0.1:27999/api/v1/grants&#39; \ --header &#39;Content-Type: application/json&#39; \ --data-raw &#39;{ &#34;allowed_http_methods&#34;: [&#34;GET&#34;], &#34;paths&#34;: [&#34;/api/v1/facts/fact_1LqMuvudjA1xdtqbjd0l&#34;], &#34;domain&#34;: &#34;sandbox.example.com&#34; }&#39; Public JS Only Grant Token This creates a public JS only grant token to the sandbox.example.com domain that has access to POST /js/v1/facts.
curl -X POST &#39;http://127.0.0.1:27999/api/v1/grants&#39; \ --header &#39;Content-Type: application/json&#39; \ --data-raw &#39;{ &#34;allowed_http_methods&#34;: [&#34;POST&#34;], &#34;paths&#34;: [&#34;/js/v1/facts&#34;], &#34;domain&#34;: &#34;sandbox.example.com&#34; }&#39; We note that the difference between /js/v1/facts and /api/v1/facts is that /js/v1/facts will automatically omit the scope_custom_id field in the fact creation payload. This is by design to allow duplicated facts created under the anonymous scope within the domain.
Casbin Implementation OPV uses casbin for the implementation of the grant token and its policy enforcement. We leverage the RBAC with multi domains model to have fine-grained access control of the Grant Token. See RBAC model definition below.
# RBAC with domain pattern model # https://github.com/casbin/casbin/blob/master/examples/rbac_with_domain_pattern_model.conf [request_definition] r = sub, dom, obj, act [policy_definition] p = sub, dom, obj, act, eft [role_definition] g = _, _, _ [policy_effect] e = some(where (p.eft == allow)) &amp;&amp; !some(where (p.eft == deny)) [matchers] m = g(r.sub, p.sub, r.dom) &amp;&amp; keyMatch2(r.dom, p.dom) &amp;&amp; keyMatch2(r.obj, p.obj) &amp;&amp; regexMatch(r.act, p.act) `},{id:13,href:"/docs/overview/database/",title:"8. Database",description:"OPV Database",content:`Database Connection The control plane and data plane require a database connection. By default in the local dev environment it connects to an in-memory (or local filesystem) sqlite database with zero-configuration.
In production, the database needs to be setup before spinning up the control plane and data plane. See Env Configuration → for the exact configuration.
The following two environment variables controls how we can connect to the databases.
OPV_DB_DRIVER OPV_DB_CONNECTION_STR Examples: OPV_DB_DRIVER OPV_DB_CONNECTION_STR ============= ============================================== &#34;sqlite3&#34; &#34;file:memdb1?mode=memory&amp;cache=shared&amp;_fk=1&#34; &#34;sqlite3&#34; &#34;_opv.sqlite?mode=memory&amp;cache=shared&amp;_fk=1&#34; &#34;mysql&#34; &#34;root:@tcp(127.0.0.1:3306)/opv?parseTime=true&#34; &#34;postgres&#34; &#34;postgres://user:password@host:5432/opv&#34; Database Visualization Database doc can be generated by make tbls, and the detailed README can be found on the dbdoc folder.
Supported databases  MySQL Vitess(MySQL driver) PostgreSQL SQLite MongoDB (TODO) DocumentDB (TODO) DynamoDB (TODO) Redis (TODO)  Currently, OPV uses the ent framework to connect to SQL databases.
`},{id:14,href:"/docs/overview/fact_types/",title:"9. PII Fact Types",description:"OPV PII Fact Types",content:`Built-in Fact Types OPV supports a long list of built-in fact types to determine . For example email, ssn, ssnstrict, phonenumber, and etc. The full list of the current fact types can be found at
curl --request GET \  --url http://127.0.0.1:28000/api/v1/fact_types \  --header &#39;x-opv-grant-token: v1:example.com:yourtoken&#39; Example of the built-in fact type slugs:
[ &#34;IMEI&#34;, &#34;ISO3166Alpha2&#34;, &#34;ISO3166Alpha3&#34;, &#34;ISO4217&#34;, &#34;address&#34;, &#34;alpha&#34;, &#34;alphanum&#34;, &#34;ascii&#34;, &#34;base64&#34;, &#34;creditcard&#34;, &#34;datauri&#34;, &#34;dialstring&#34;, &#34;dns&#34;, &#34;email&#34;, &#34;float&#34;, &#34;fullwidth&#34;, &#34;halfwidth&#34;, &#34;hexadecimal&#34;, &#34;hexcolor&#34;, &#34;host&#34;, &#34;int&#34;, &#34;ip&#34;, &#34;ipv4&#34;, &#34;ipv6&#34;, &#34;isbn10&#34;, &#34;isbn13&#34;, &#34;json&#34;, &#34;latitude&#34;, &#34;longitude&#34;, &#34;lowercase&#34;, &#34;mac&#34;, &#34;multibyte&#34;, &#34;notnull&#34;, &#34;null&#34;, &#34;numeric&#34;, &#34;phonenumber&#34;, &#34;photourl&#34;, &#34;port&#34;, &#34;printableascii&#34;, &#34;requri&#34;, &#34;requrl&#34;, &#34;rfc3339&#34;, &#34;rfc3339WithoutZone&#34;, &#34;rgbcolor&#34;, &#34;semver&#34;, &#34;ssn&#34;, &#34;ssnstrict&#34;, &#34;uppercase&#34;, &#34;url&#34;, &#34;utfdigit&#34;, &#34;utfletter&#34;, &#34;utfletternum&#34;, &#34;utfnumeric&#34;, &#34;uuid&#34;, &#34;uuidv3&#34;, &#34;uuidv4&#34;, &#34;uuidv5&#34;, &#34;variablewidth&#34;, ] `},{id:15,href:"/docs/development/",title:"Development",description:"Development for OPV",content:``},{id:16,href:"/docs/",title:"Overview",description:"OPV Documentation Overview",content:``},{id:17,href:"/docs/overview/",title:"Overview",description:"Overview of OPV",content:``}];b.add(c),userinput.addEventListener('input',e,!0),suggestions.addEventListener('click',f,!0);function e(){var g=this.value,e=b.search(g,5),f=suggestions.childNodes,h=0,i=e.length,c;for(suggestions.classList.remove('d-none'),e.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.href,t.textContent=b.title,d.textContent=b.description,suggestions.appendChild(c)});f.length>i;)suggestions.removeChild(f[h])}function f(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()